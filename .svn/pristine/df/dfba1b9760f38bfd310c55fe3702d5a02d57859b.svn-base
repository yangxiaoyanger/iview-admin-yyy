{"remainingRequest":"D:\\iview-admin-master\\node_modules\\thread-loader\\dist\\cjs.js!D:\\iview-admin-master\\node_modules\\babel-loader\\lib\\index.js!D:\\iview-admin-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\iview-admin-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\iview-admin-master\\src\\components\\tree-select\\tree-select-tree.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\iview-admin-master\\src\\components\\tree-select\\tree-select-tree.vue","mtime":1560231513000},{"path":"D:\\iview-admin-master\\.babelrc","mtime":1560231513000},{"path":"D:\\iview-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Emitter from 'iview/src/mixins/emitter.js';\n\nvar arrayEqual = function arrayEqual(arr1, arr2) {\n  // 判断数组的长度\n  if (arr1.length !== arr2.length) {\n    return false;\n  } else {\n    // 循环遍历数组的值进行比较\n    for (var i = 0; i < arr1.length; i++) {\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n};\n\nexport default {\n  name: 'TreeSelectTree',\n  mixins: [Emitter],\n  props: {\n    data: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    selectedArray: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    loadData: Function\n  },\n  data: function data() {\n    return {\n      flatDic: {},\n      checkedArray: []\n    };\n  },\n  inject: ['parent'],\n  computed: {\n    expandAll: function expandAll() {\n      return this.parent.$attrs['expand-all'];\n    }\n  },\n  watch: {\n    data: function data(newData, oldVal) {\n      var _this = this;\n\n      this.updateFlagDic(newData);\n      var selectArray = [];\n      this.selectedArray.forEach(function (id) {\n        if (id in _this.flatDic) selectArray.push(id);\n      });\n      this.$emit('on-check', selectArray.map(function (id) {\n        return _this.flatDic[id];\n      }));\n      if (this.expandAll) this.checkData(newData, false, true);\n    },\n    selectedArray: function selectedArray(newVal, oldVal) {\n      var _this2 = this;\n\n      if (arrayEqual(newVal, oldVal)) return;\n      var filtedNewVal = newVal.filter(function (id) {\n        return id in _this2.flatDic;\n      });\n      this.$emit('on-check', filtedNewVal.map(function (id) {\n        return _this2.flatDic[id];\n      }));\n      this.$emit('on-clear');\n      this.$nextTick(function () {\n        _this2.checkData(_this2.data, true);\n      });\n    }\n  },\n  methods: {\n    checkEmit: function checkEmit(value, label) {\n      this.dispatch('iSelect', 'on-select-selected', {\n        value: value,\n        label: label\n      });\n      this.$emit('on-select-selected', {\n        value: value,\n        label: label\n      });\n    },\n    updateFlagDic: function updateFlagDic(newData) {\n      var newFlagDic = {};\n      this.setFlagDic(newData, function (item) {\n        newFlagDic[item.id] = item;\n      });\n      this.flatDic = newFlagDic;\n    },\n    setFlagDic: function setFlagDic(data, callback) {\n      var _this3 = this;\n\n      data.forEach(function (item) {\n        if (item.children && item.children.length) {\n          _this3.setFlagDic(item.children, callback);\n        }\n\n        callback(item);\n      });\n    },\n    handleCheckSelect: function handleCheckSelect(selectArray, selectItem) {\n      this.$emit('on-check', selectArray);\n      this.parent.$emit('on-change', selectArray);\n    },\n    checkData: function checkData(data, emit, expandAll) {\n      var _this4 = this;\n\n      data.forEach(function (item) {\n        if (_this4.selectedArray.includes(item.id)) {\n          _this4.$set(item, 'checked', true);\n\n          _this4.checkedArray.push(item);\n\n          if (emit) _this4.checkEmit(item.id, item.title);\n        } else _this4.$set(item, 'checked', false);\n\n        if (item.children && item.children.length) {\n          if (_this4.expandAll && expandAll) _this4.$set(item, 'expand', true);\n\n          _this4.checkData(item.children, emit, expandAll);\n        }\n      });\n    },\n    loadDataCallback: function loadDataCallback(item, callback) {\n      var _this5 = this;\n\n      this.loadData(item, function (data) {\n        return function () {\n          callback(data);\n\n          _this5.updateFlagDic(_this5.data);\n        }(data);\n      });\n    }\n  },\n  mounted: function mounted() {\n    var _this6 = this;\n\n    this.checkData(this.data, false, true);\n    this.$nextTick(function () {\n      _this6.$emit('on-check', _this6.checkedArray);\n    });\n  }\n};",null]}