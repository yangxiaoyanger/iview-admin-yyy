{"remainingRequest":"D:\\iview-admin-master\\node_modules\\babel-loader\\lib\\index.js!D:\\iview-admin-master\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\iview-admin-master\\src\\libs\\security.js","dependencies":[{"path":"D:\\iview-admin-master\\src\\libs\\security.js","mtime":1560827813667},{"path":"D:\\iview-admin-master\\.babelrc","mtime":1560231513000},{"path":"D:\\iview-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.number.constructor\";\n\n/*\n * RSA, a suite of routines for performing RSA public-key computations in JavaScript.\n * Copyright 1998-2005 David Shapiro.\n * Dave Shapiro\n * dave@ohdave.com \n * changed by Fuchun, 2010-05-06\n * fcrpg2005@gmail.com\n */\nvar RSAUtils = function ($w) {\n  if (typeof $w.RSAUtils === 'undefined') var RSAUtils = $w.RSAUtils = {};\n  var biRadixBase = 2;\n  var biRadixBits = 16;\n  var bitsPerDigit = biRadixBits;\n  var biRadix = 1 << 16; // = 2^16 = 65536\n\n  var biHalfRadix = biRadix >>> 1;\n  var biRadixSquared = biRadix * biRadix;\n  var maxDigitVal = biRadix - 1;\n  var maxInteger = 9999999999999998; //maxDigits:\n  //Change this to accommodate your largest number size. Use setMaxDigits()\n  //to change it!\n  //\n  //In general, if you're working with numbers of size N bits, you'll need 2*N\n  //bits of storage. Each digit holds 16 bits. So, a 1024-bit key will need\n  //\n  //1024 * 2 / 16 = 128 digits of storage.\n  //\n\n  var maxDigits;\n  var ZERO_ARRAY;\n  var bigZero, bigOne;\n\n  var BigInt = $w.BigInt = function (flag) {\n    if (typeof flag == \"boolean\" && flag == true) {\n      this.digits = null;\n    } else {\n      this.digits = ZERO_ARRAY.slice(0);\n    }\n\n    this.isNeg = false;\n  };\n\n  RSAUtils.setMaxDigits = function (value) {\n    maxDigits = value;\n    ZERO_ARRAY = new Array(maxDigits);\n\n    for (var iza = 0; iza < ZERO_ARRAY.length; iza++) {\n      ZERO_ARRAY[iza] = 0;\n    }\n\n    bigZero = new BigInt();\n    bigOne = new BigInt();\n    bigOne.digits[0] = 1;\n  };\n\n  RSAUtils.setMaxDigits(20); //The maximum number of digits in base 10 you can convert to an\n  //integer without JavaScript throwing up on you.\n\n  var dpl10 = 15;\n\n  RSAUtils.biFromNumber = function (i) {\n    var result = new BigInt();\n    result.isNeg = i < 0;\n    i = Math.abs(i);\n    var j = 0;\n\n    while (i > 0) {\n      result.digits[j++] = i & maxDigitVal;\n      i = Math.floor(i / biRadix);\n    }\n\n    return result;\n  }; //lr10 = 10 ^ dpl10\n\n\n  var lr10 = RSAUtils.biFromNumber(1000000000000000);\n\n  RSAUtils.biFromDecimal = function (s) {\n    var isNeg = s.charAt(0) == '-';\n    var i = isNeg ? 1 : 0;\n    var result; // Skip leading zeros.\n\n    while (i < s.length && s.charAt(i) == '0') {\n      ++i;\n    }\n\n    if (i == s.length) {\n      result = new BigInt();\n    } else {\n      var digitCount = s.length - i;\n      var fgl = digitCount % dpl10;\n      if (fgl == 0) fgl = dpl10;\n      result = RSAUtils.biFromNumber(Number(s.substr(i, fgl)));\n      i += fgl;\n\n      while (i < s.length) {\n        result = RSAUtils.biAdd(RSAUtils.biMultiply(result, lr10), RSAUtils.biFromNumber(Number(s.substr(i, dpl10))));\n        i += dpl10;\n      }\n\n      result.isNeg = isNeg;\n    }\n\n    return result;\n  };\n\n  RSAUtils.biCopy = function (bi) {\n    var result = new BigInt(true);\n    result.digits = bi.digits.slice(0);\n    result.isNeg = bi.isNeg;\n    return result;\n  };\n\n  RSAUtils.reverseStr = function (s) {\n    var result = \"\";\n\n    for (var i = s.length - 1; i > -1; --i) {\n      result += s.charAt(i);\n    }\n\n    return result;\n  };\n\n  var hexatrigesimalToChar = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n\n  RSAUtils.biToString = function (x, radix) {\n    // 2 <= radix <= 36\n    var b = new BigInt();\n    b.digits[0] = radix;\n    var qr = RSAUtils.biDivideModulo(x, b);\n    var result = hexatrigesimalToChar[qr[1].digits[0]];\n\n    while (RSAUtils.biCompare(qr[0], bigZero) == 1) {\n      qr = RSAUtils.biDivideModulo(qr[0], b);\n      digit = qr[1].digits[0];\n      result += hexatrigesimalToChar[qr[1].digits[0]];\n    }\n\n    return (x.isNeg ? \"-\" : \"\") + RSAUtils.reverseStr(result);\n  };\n\n  RSAUtils.biToDecimal = function (x) {\n    var b = new BigInt();\n    b.digits[0] = 10;\n    var qr = RSAUtils.biDivideModulo(x, b);\n    var result = String(qr[1].digits[0]);\n\n    while (RSAUtils.biCompare(qr[0], bigZero) == 1) {\n      qr = RSAUtils.biDivideModulo(qr[0], b);\n      result += String(qr[1].digits[0]);\n    }\n\n    return (x.isNeg ? \"-\" : \"\") + RSAUtils.reverseStr(result);\n  };\n\n  var hexToChar = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\n\n  RSAUtils.digitToHex = function (n) {\n    var mask = 0xf;\n    var result = \"\";\n\n    for (var i = 0; i < 4; ++i) {\n      result += hexToChar[n & mask];\n      n >>>= 4;\n    }\n\n    return RSAUtils.reverseStr(result);\n  };\n\n  RSAUtils.biToHex = function (x) {\n    var result = \"\";\n    var n = RSAUtils.biHighIndex(x);\n\n    for (var i = RSAUtils.biHighIndex(x); i > -1; --i) {\n      result += RSAUtils.digitToHex(x.digits[i]);\n    }\n\n    return result;\n  };\n\n  RSAUtils.charToHex = function (c) {\n    var ZERO = 48;\n    var NINE = ZERO + 9;\n    var littleA = 97;\n    var littleZ = littleA + 25;\n    var bigA = 65;\n    var bigZ = 65 + 25;\n    var result;\n\n    if (c >= ZERO && c <= NINE) {\n      result = c - ZERO;\n    } else if (c >= bigA && c <= bigZ) {\n      result = 10 + c - bigA;\n    } else if (c >= littleA && c <= littleZ) {\n      result = 10 + c - littleA;\n    } else {\n      result = 0;\n    }\n\n    return result;\n  };\n\n  RSAUtils.hexToDigit = function (s) {\n    var result = 0;\n    var sl = Math.min(s.length, 4);\n\n    for (var i = 0; i < sl; ++i) {\n      result <<= 4;\n      result |= RSAUtils.charToHex(s.charCodeAt(i));\n    }\n\n    return result;\n  };\n\n  RSAUtils.biFromHex = function (s) {\n    var result = new BigInt();\n    var sl = s.length;\n\n    for (var i = sl, j = 0; i > 0; i -= 4, ++j) {\n      result.digits[j] = RSAUtils.hexToDigit(s.substr(Math.max(i - 4, 0), Math.min(i, 4)));\n    }\n\n    return result;\n  };\n\n  RSAUtils.biFromString = function (s, radix) {\n    var isNeg = s.charAt(0) == '-';\n    var istop = isNeg ? 1 : 0;\n    var result = new BigInt();\n    var place = new BigInt();\n    place.digits[0] = 1; // radix^0\n\n    for (var i = s.length - 1; i >= istop; i--) {\n      var c = s.charCodeAt(i);\n      var digit = RSAUtils.charToHex(c);\n      var biDigit = RSAUtils.biMultiplyDigit(place, digit);\n      result = RSAUtils.biAdd(result, biDigit);\n      place = RSAUtils.biMultiplyDigit(place, radix);\n    }\n\n    result.isNeg = isNeg;\n    return result;\n  };\n\n  RSAUtils.biDump = function (b) {\n    return (b.isNeg ? \"-\" : \"\") + b.digits.join(\" \");\n  };\n\n  RSAUtils.biAdd = function (x, y) {\n    var result;\n\n    if (x.isNeg != y.isNeg) {\n      y.isNeg = !y.isNeg;\n      result = RSAUtils.biSubtract(x, y);\n      y.isNeg = !y.isNeg;\n    } else {\n      result = new BigInt();\n      var c = 0;\n      var n;\n\n      for (var i = 0; i < x.digits.length; ++i) {\n        n = x.digits[i] + y.digits[i] + c;\n        result.digits[i] = n % biRadix;\n        c = Number(n >= biRadix);\n      }\n\n      result.isNeg = x.isNeg;\n    }\n\n    return result;\n  };\n\n  RSAUtils.biSubtract = function (x, y) {\n    var result;\n\n    if (x.isNeg != y.isNeg) {\n      y.isNeg = !y.isNeg;\n      result = RSAUtils.biAdd(x, y);\n      y.isNeg = !y.isNeg;\n    } else {\n      result = new BigInt();\n      var n, c;\n      c = 0;\n\n      for (var i = 0; i < x.digits.length; ++i) {\n        n = x.digits[i] - y.digits[i] + c;\n        result.digits[i] = n % biRadix; // Stupid non-conforming modulus operation.\n\n        if (result.digits[i] < 0) result.digits[i] += biRadix;\n        c = 0 - Number(n < 0);\n      } // Fix up the negative sign, if any.\n\n\n      if (c == -1) {\n        c = 0;\n\n        for (var i = 0; i < x.digits.length; ++i) {\n          n = 0 - result.digits[i] + c;\n          result.digits[i] = n % biRadix; // Stupid non-conforming modulus operation.\n\n          if (result.digits[i] < 0) result.digits[i] += biRadix;\n          c = 0 - Number(n < 0);\n        } // Result is opposite sign of arguments.\n\n\n        result.isNeg = !x.isNeg;\n      } else {\n        // Result is same sign.\n        result.isNeg = x.isNeg;\n      }\n    }\n\n    return result;\n  };\n\n  RSAUtils.biHighIndex = function (x) {\n    var result = x.digits.length - 1;\n\n    while (result > 0 && x.digits[result] == 0) {\n      --result;\n    }\n\n    return result;\n  };\n\n  RSAUtils.biNumBits = function (x) {\n    var n = RSAUtils.biHighIndex(x);\n    var d = x.digits[n];\n    var m = (n + 1) * bitsPerDigit;\n    var result;\n\n    for (result = m; result > m - bitsPerDigit; --result) {\n      if ((d & 0x8000) != 0) break;\n      d <<= 1;\n    }\n\n    return result;\n  };\n\n  RSAUtils.biMultiply = function (x, y) {\n    var result = new BigInt();\n    var c;\n    var n = RSAUtils.biHighIndex(x);\n    var t = RSAUtils.biHighIndex(y);\n    var u, uv, k;\n\n    for (var i = 0; i <= t; ++i) {\n      c = 0;\n      k = i;\n\n      for (var j = 0; j <= n; ++j, ++k) {\n        uv = result.digits[k] + x.digits[j] * y.digits[i] + c;\n        result.digits[k] = uv & maxDigitVal;\n        c = uv >>> biRadixBits; //c = Math.floor(uv / biRadix);\n      }\n\n      result.digits[i + n + 1] = c;\n    } // Someone give me a logical xor, please.\n\n\n    result.isNeg = x.isNeg != y.isNeg;\n    return result;\n  };\n\n  RSAUtils.biMultiplyDigit = function (x, y) {\n    var n, c, uv;\n    var result = new BigInt();\n    n = RSAUtils.biHighIndex(x);\n    c = 0;\n\n    for (var j = 0; j <= n; ++j) {\n      uv = result.digits[j] + x.digits[j] * y + c;\n      result.digits[j] = uv & maxDigitVal;\n      c = uv >>> biRadixBits; //c = Math.floor(uv / biRadix);\n    }\n\n    result.digits[1 + n] = c;\n    return result;\n  };\n\n  RSAUtils.arrayCopy = function (src, srcStart, dest, destStart, n) {\n    var m = Math.min(srcStart + n, src.length);\n\n    for (var i = srcStart, j = destStart; i < m; ++i, ++j) {\n      dest[j] = src[i];\n    }\n  };\n\n  var highBitMasks = [0x0000, 0x8000, 0xC000, 0xE000, 0xF000, 0xF800, 0xFC00, 0xFE00, 0xFF00, 0xFF80, 0xFFC0, 0xFFE0, 0xFFF0, 0xFFF8, 0xFFFC, 0xFFFE, 0xFFFF];\n\n  RSAUtils.biShiftLeft = function (x, n) {\n    var digitCount = Math.floor(n / bitsPerDigit);\n    var result = new BigInt();\n    RSAUtils.arrayCopy(x.digits, 0, result.digits, digitCount, result.digits.length - digitCount);\n    var bits = n % bitsPerDigit;\n    var rightBits = bitsPerDigit - bits;\n\n    for (var i = result.digits.length - 1, i1 = i - 1; i > 0; --i, --i1) {\n      result.digits[i] = result.digits[i] << bits & maxDigitVal | (result.digits[i1] & highBitMasks[bits]) >>> rightBits;\n    }\n\n    result.digits[0] = result.digits[i] << bits & maxDigitVal;\n    result.isNeg = x.isNeg;\n    return result;\n  };\n\n  var lowBitMasks = [0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F, 0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF, 0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF];\n\n  RSAUtils.biShiftRight = function (x, n) {\n    var digitCount = Math.floor(n / bitsPerDigit);\n    var result = new BigInt();\n    RSAUtils.arrayCopy(x.digits, digitCount, result.digits, 0, x.digits.length - digitCount);\n    var bits = n % bitsPerDigit;\n    var leftBits = bitsPerDigit - bits;\n\n    for (var i = 0, i1 = i + 1; i < result.digits.length - 1; ++i, ++i1) {\n      result.digits[i] = result.digits[i] >>> bits | (result.digits[i1] & lowBitMasks[bits]) << leftBits;\n    }\n\n    result.digits[result.digits.length - 1] >>>= bits;\n    result.isNeg = x.isNeg;\n    return result;\n  };\n\n  RSAUtils.biMultiplyByRadixPower = function (x, n) {\n    var result = new BigInt();\n    RSAUtils.arrayCopy(x.digits, 0, result.digits, n, result.digits.length - n);\n    return result;\n  };\n\n  RSAUtils.biDivideByRadixPower = function (x, n) {\n    var result = new BigInt();\n    RSAUtils.arrayCopy(x.digits, n, result.digits, 0, result.digits.length - n);\n    return result;\n  };\n\n  RSAUtils.biModuloByRadixPower = function (x, n) {\n    var result = new BigInt();\n    RSAUtils.arrayCopy(x.digits, 0, result.digits, 0, n);\n    return result;\n  };\n\n  RSAUtils.biCompare = function (x, y) {\n    if (x.isNeg != y.isNeg) {\n      return 1 - 2 * Number(x.isNeg);\n    }\n\n    for (var i = x.digits.length - 1; i >= 0; --i) {\n      if (x.digits[i] != y.digits[i]) {\n        if (x.isNeg) {\n          return 1 - 2 * Number(x.digits[i] > y.digits[i]);\n        } else {\n          return 1 - 2 * Number(x.digits[i] < y.digits[i]);\n        }\n      }\n    }\n\n    return 0;\n  };\n\n  RSAUtils.biDivideModulo = function (x, y) {\n    var nb = RSAUtils.biNumBits(x);\n    var tb = RSAUtils.biNumBits(y);\n    var origYIsNeg = y.isNeg;\n    var q, r;\n\n    if (nb < tb) {\n      // |x| < |y|\n      if (x.isNeg) {\n        q = RSAUtils.biCopy(bigOne);\n        q.isNeg = !y.isNeg;\n        x.isNeg = false;\n        y.isNeg = false;\n        r = biSubtract(y, x); // Restore signs, 'cause they're references.\n\n        x.isNeg = true;\n        y.isNeg = origYIsNeg;\n      } else {\n        q = new BigInt();\n        r = RSAUtils.biCopy(x);\n      }\n\n      return [q, r];\n    }\n\n    q = new BigInt();\n    r = x; // Normalize Y.\n\n    var t = Math.ceil(tb / bitsPerDigit) - 1;\n    var lambda = 0;\n\n    while (y.digits[t] < biHalfRadix) {\n      y = RSAUtils.biShiftLeft(y, 1);\n      ++lambda;\n      ++tb;\n      t = Math.ceil(tb / bitsPerDigit) - 1;\n    } // Shift r over to keep the quotient constant. We'll shift the\n    // remainder back at the end.\n\n\n    r = RSAUtils.biShiftLeft(r, lambda);\n    nb += lambda; // Update the bit count for x.\n\n    var n = Math.ceil(nb / bitsPerDigit) - 1;\n    var b = RSAUtils.biMultiplyByRadixPower(y, n - t);\n\n    while (RSAUtils.biCompare(r, b) != -1) {\n      ++q.digits[n - t];\n      r = RSAUtils.biSubtract(r, b);\n    }\n\n    for (var i = n; i > t; --i) {\n      var ri = i >= r.digits.length ? 0 : r.digits[i];\n      var ri1 = i - 1 >= r.digits.length ? 0 : r.digits[i - 1];\n      var ri2 = i - 2 >= r.digits.length ? 0 : r.digits[i - 2];\n      var yt = t >= y.digits.length ? 0 : y.digits[t];\n      var yt1 = t - 1 >= y.digits.length ? 0 : y.digits[t - 1];\n\n      if (ri == yt) {\n        q.digits[i - t - 1] = maxDigitVal;\n      } else {\n        q.digits[i - t - 1] = Math.floor((ri * biRadix + ri1) / yt);\n      }\n\n      var c1 = q.digits[i - t - 1] * (yt * biRadix + yt1);\n      var c2 = ri * biRadixSquared + (ri1 * biRadix + ri2);\n\n      while (c1 > c2) {\n        --q.digits[i - t - 1];\n        c1 = q.digits[i - t - 1] * (yt * biRadix | yt1);\n        c2 = ri * biRadix * biRadix + (ri1 * biRadix + ri2);\n      }\n\n      b = RSAUtils.biMultiplyByRadixPower(y, i - t - 1);\n      r = RSAUtils.biSubtract(r, RSAUtils.biMultiplyDigit(b, q.digits[i - t - 1]));\n\n      if (r.isNeg) {\n        r = RSAUtils.biAdd(r, b);\n        --q.digits[i - t - 1];\n      }\n    }\n\n    r = RSAUtils.biShiftRight(r, lambda); // Fiddle with the signs and stuff to make sure that 0 <= r < y.\n\n    q.isNeg = x.isNeg != origYIsNeg;\n\n    if (x.isNeg) {\n      if (origYIsNeg) {\n        q = RSAUtils.biAdd(q, bigOne);\n      } else {\n        q = RSAUtils.biSubtract(q, bigOne);\n      }\n\n      y = RSAUtils.biShiftRight(y, lambda);\n      r = RSAUtils.biSubtract(y, r);\n    } // Check for the unbelievably stupid degenerate case of r == -0.\n\n\n    if (r.digits[0] == 0 && RSAUtils.biHighIndex(r) == 0) r.isNeg = false;\n    return [q, r];\n  };\n\n  RSAUtils.biDivide = function (x, y) {\n    return RSAUtils.biDivideModulo(x, y)[0];\n  };\n\n  RSAUtils.biModulo = function (x, y) {\n    return RSAUtils.biDivideModulo(x, y)[1];\n  };\n\n  RSAUtils.biMultiplyMod = function (x, y, m) {\n    return RSAUtils.biModulo(RSAUtils.biMultiply(x, y), m);\n  };\n\n  RSAUtils.biPow = function (x, y) {\n    var result = bigOne;\n    var a = x;\n\n    while (true) {\n      if ((y & 1) != 0) result = RSAUtils.biMultiply(result, a);\n      y >>= 1;\n      if (y == 0) break;\n      a = RSAUtils.biMultiply(a, a);\n    }\n\n    return result;\n  };\n\n  RSAUtils.biPowMod = function (x, y, m) {\n    var result = bigOne;\n    var a = x;\n    var k = y;\n\n    while (true) {\n      if ((k.digits[0] & 1) != 0) result = RSAUtils.biMultiplyMod(result, a, m);\n      k = RSAUtils.biShiftRight(k, 1);\n      if (k.digits[0] == 0 && RSAUtils.biHighIndex(k) == 0) break;\n      a = RSAUtils.biMultiplyMod(a, a, m);\n    }\n\n    return result;\n  };\n\n  $w.BarrettMu = function (m) {\n    this.modulus = RSAUtils.biCopy(m);\n    this.k = RSAUtils.biHighIndex(this.modulus) + 1;\n    var b2k = new BigInt();\n    b2k.digits[2 * this.k] = 1; // b2k = b^(2k)\n\n    this.mu = RSAUtils.biDivide(b2k, this.modulus);\n    this.bkplus1 = new BigInt();\n    this.bkplus1.digits[this.k + 1] = 1; // bkplus1 = b^(k+1)\n\n    this.modulo = BarrettMu_modulo;\n    this.multiplyMod = BarrettMu_multiplyMod;\n    this.powMod = BarrettMu_powMod;\n  };\n\n  function BarrettMu_modulo(x) {\n    var $dmath = RSAUtils;\n    var q1 = $dmath.biDivideByRadixPower(x, this.k - 1);\n    var q2 = $dmath.biMultiply(q1, this.mu);\n    var q3 = $dmath.biDivideByRadixPower(q2, this.k + 1);\n    var r1 = $dmath.biModuloByRadixPower(x, this.k + 1);\n    var r2term = $dmath.biMultiply(q3, this.modulus);\n    var r2 = $dmath.biModuloByRadixPower(r2term, this.k + 1);\n    var r = $dmath.biSubtract(r1, r2);\n\n    if (r.isNeg) {\n      r = $dmath.biAdd(r, this.bkplus1);\n    }\n\n    var rgtem = $dmath.biCompare(r, this.modulus) >= 0;\n\n    while (rgtem) {\n      r = $dmath.biSubtract(r, this.modulus);\n      rgtem = $dmath.biCompare(r, this.modulus) >= 0;\n    }\n\n    return r;\n  }\n\n  function BarrettMu_multiplyMod(x, y) {\n    /*\n    x = this.modulo(x);\n    y = this.modulo(y);\n    */\n    var xy = RSAUtils.biMultiply(x, y);\n    return this.modulo(xy);\n  }\n\n  function BarrettMu_powMod(x, y) {\n    var result = new BigInt();\n    result.digits[0] = 1;\n    var a = x;\n    var k = y;\n\n    while (true) {\n      if ((k.digits[0] & 1) != 0) result = this.multiplyMod(result, a);\n      k = RSAUtils.biShiftRight(k, 1);\n      if (k.digits[0] == 0 && RSAUtils.biHighIndex(k) == 0) break;\n      a = this.multiplyMod(a, a);\n    }\n\n    return result;\n  }\n\n  var RSAKeyPair = function RSAKeyPair(encryptionExponent, decryptionExponent, modulus) {\n    var $dmath = RSAUtils;\n    this.e = $dmath.biFromHex(encryptionExponent);\n    this.d = $dmath.biFromHex(decryptionExponent);\n    this.m = $dmath.biFromHex(modulus); // We can do two bytes per digit, so\n    // chunkSize = 2 * (number of digits in modulus - 1).\n    // Since biHighIndex returns the high index, not the number of digits, 1 has\n    // already been subtracted.\n\n    this.chunkSize = 2 * $dmath.biHighIndex(this.m);\n    this.radix = 16;\n    this.barrett = new $w.BarrettMu(this.m);\n  };\n\n  RSAUtils.getKeyPair = function (encryptionExponent, decryptionExponent, modulus) {\n    return new RSAKeyPair(encryptionExponent, decryptionExponent, modulus);\n  };\n\n  if (typeof $w.twoDigit === 'undefined') {\n    $w.twoDigit = function (n) {\n      return (n < 10 ? \"0\" : \"\") + String(n);\n    };\n  } // Altered by Rob Saunders (rob@robsaunders.net). New routine pads the\n  // string after it has been converted to an array. This fixes an\n  // incompatibility with Flash MX's ActionScript.\n\n\n  RSAUtils.encryptedString = function (key, s) {\n    var a = [];\n    var sl = s.length;\n    var i = 0;\n\n    while (i < sl) {\n      a[i] = s.charCodeAt(i);\n      i++;\n    }\n\n    while (a.length % key.chunkSize != 0) {\n      a[i++] = 0;\n    }\n\n    var al = a.length;\n    var result = \"\";\n    var j, k, block;\n\n    for (i = 0; i < al; i += key.chunkSize) {\n      block = new BigInt();\n      j = 0;\n\n      for (k = i; k < i + key.chunkSize; ++j) {\n        block.digits[j] = a[k++];\n        block.digits[j] += a[k++] << 8;\n      }\n\n      var crypt = key.barrett.powMod(block, key.e);\n      var text = key.radix == 16 ? RSAUtils.biToHex(crypt) : RSAUtils.biToString(crypt, key.radix);\n      result += text + \" \";\n    }\n\n    return result.substring(0, result.length - 1); // Remove last space.\n  };\n\n  RSAUtils.decryptedString = function (key, s) {\n    var blocks = s.split(\" \");\n    var result = \"\";\n    var i, j, block;\n\n    for (i = 0; i < blocks.length; ++i) {\n      var bi;\n\n      if (key.radix == 16) {\n        bi = RSAUtils.biFromHex(blocks[i]);\n      } else {\n        bi = RSAUtils.biFromString(blocks[i], key.radix);\n      }\n\n      block = key.barrett.powMod(bi, key.d);\n\n      for (j = 0; j <= RSAUtils.biHighIndex(block); ++j) {\n        result += String.fromCharCode(block.digits[j] & 255, block.digits[j] >> 8);\n      }\n    } // Remove trailing null, if any.\n\n\n    if (result.charCodeAt(result.length - 1) == 0) {\n      result = result.substring(0, result.length - 1);\n    }\n\n    return result;\n  };\n\n  RSAUtils.setMaxDigits(130);\n  return RSAUtils;\n}(window);\n\nexport { RSAUtils };",{"version":3,"sources":["D:\\iview-admin-master\\src\\libs\\security.js"],"names":["RSAUtils","$w","biRadixBase","biRadixBits","bitsPerDigit","biRadix","biHalfRadix","biRadixSquared","maxDigitVal","maxInteger","maxDigits","ZERO_ARRAY","bigZero","bigOne","BigInt","flag","digits","slice","isNeg","setMaxDigits","value","Array","iza","length","dpl10","biFromNumber","i","result","Math","abs","j","floor","lr10","biFromDecimal","s","charAt","digitCount","fgl","Number","substr","biAdd","biMultiply","biCopy","bi","reverseStr","hexatrigesimalToChar","biToString","x","radix","b","qr","biDivideModulo","biCompare","digit","biToDecimal","String","hexToChar","digitToHex","n","mask","biToHex","biHighIndex","charToHex","c","ZERO","NINE","littleA","littleZ","bigA","bigZ","hexToDigit","sl","min","charCodeAt","biFromHex","max","biFromString","istop","place","biDigit","biMultiplyDigit","biDump","join","y","biSubtract","biNumBits","d","m","t","u","uv","k","arrayCopy","src","srcStart","dest","destStart","highBitMasks","biShiftLeft","bits","rightBits","i1","lowBitMasks","biShiftRight","leftBits","biMultiplyByRadixPower","biDivideByRadixPower","biModuloByRadixPower","nb","tb","origYIsNeg","q","r","ceil","lambda","ri","ri1","ri2","yt","yt1","c1","c2","biDivide","biModulo","biMultiplyMod","biPow","a","biPowMod","BarrettMu","modulus","b2k","mu","bkplus1","modulo","BarrettMu_modulo","multiplyMod","BarrettMu_multiplyMod","powMod","BarrettMu_powMod","$dmath","q1","q2","q3","r1","r2term","r2","rgtem","xy","RSAKeyPair","encryptionExponent","decryptionExponent","e","chunkSize","barrett","getKeyPair","twoDigit","encryptedString","key","al","block","crypt","text","substring","decryptedString","blocks","split","fromCharCode","window"],"mappings":"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","sourcesContent":["/*\n * RSA, a suite of routines for performing RSA public-key computations in JavaScript.\n * Copyright 1998-2005 David Shapiro.\n * Dave Shapiro\n * dave@ohdave.com \n * changed by Fuchun, 2010-05-06\n * fcrpg2005@gmail.com\n */\n\nvar RSAUtils = (function($w) {\n\nif(typeof $w.RSAUtils === 'undefined')\n\tvar RSAUtils = $w.RSAUtils = {};\n\nvar biRadixBase = 2;\nvar biRadixBits = 16;\nvar bitsPerDigit = biRadixBits;\nvar biRadix = 1 << 16; // = 2^16 = 65536\nvar biHalfRadix = biRadix >>> 1;\nvar biRadixSquared = biRadix * biRadix;\nvar maxDigitVal = biRadix - 1;\nvar maxInteger = 9999999999999998;\n\n//maxDigits:\n//Change this to accommodate your largest number size. Use setMaxDigits()\n//to change it!\n//\n//In general, if you're working with numbers of size N bits, you'll need 2*N\n//bits of storage. Each digit holds 16 bits. So, a 1024-bit key will need\n//\n//1024 * 2 / 16 = 128 digits of storage.\n//\nvar maxDigits;\nvar ZERO_ARRAY;\nvar bigZero, bigOne;\n\nvar BigInt = $w.BigInt = function(flag) {\n\tif (typeof flag == \"boolean\" && flag == true) {\n\t\tthis.digits = null;\n\t} else {\n\t\tthis.digits = ZERO_ARRAY.slice(0);\n\t}\n\tthis.isNeg = false;\n};\n\nRSAUtils.setMaxDigits = function(value) {\n\tmaxDigits = value;\n\tZERO_ARRAY = new Array(maxDigits);\n\tfor (var iza = 0; iza < ZERO_ARRAY.length; iza++) ZERO_ARRAY[iza] = 0;\n\tbigZero = new BigInt();\n\tbigOne = new BigInt();\n\tbigOne.digits[0] = 1;\n};\nRSAUtils.setMaxDigits(20);\n\n//The maximum number of digits in base 10 you can convert to an\n//integer without JavaScript throwing up on you.\nvar dpl10 = 15;\n\nRSAUtils.biFromNumber = function(i) {\n\tvar result = new BigInt();\n\tresult.isNeg = i < 0;\n\ti = Math.abs(i);\n\tvar j = 0;\n\twhile (i > 0) {\n\t\tresult.digits[j++] = i & maxDigitVal;\n\t\ti = Math.floor(i / biRadix);\n\t}\n\treturn result;\n};\n\n//lr10 = 10 ^ dpl10\nvar lr10 = RSAUtils.biFromNumber(1000000000000000);\n\nRSAUtils.biFromDecimal = function(s) {\n\tvar isNeg = s.charAt(0) == '-';\n\tvar i = isNeg ? 1 : 0;\n\tvar result;\n\t// Skip leading zeros.\n\twhile (i < s.length && s.charAt(i) == '0') ++i;\n\tif (i == s.length) {\n\t\tresult = new BigInt();\n\t}\n\telse {\n\t\tvar digitCount = s.length - i;\n\t\tvar fgl = digitCount % dpl10;\n\t\tif (fgl == 0) fgl = dpl10;\n\t\tresult = RSAUtils.biFromNumber(Number(s.substr(i, fgl)));\n\t\ti += fgl;\n\t\twhile (i < s.length) {\n\t\t\tresult = RSAUtils.biAdd(RSAUtils.biMultiply(result, lr10),\n\t\t\t\t\tRSAUtils.biFromNumber(Number(s.substr(i, dpl10))));\n\t\t\ti += dpl10;\n\t\t}\n\t\tresult.isNeg = isNeg;\n\t}\n\treturn result;\n};\n\nRSAUtils.biCopy = function(bi) {\n\tvar result = new BigInt(true);\n\tresult.digits = bi.digits.slice(0);\n\tresult.isNeg = bi.isNeg;\n\treturn result;\n};\n\nRSAUtils.reverseStr = function(s) {\n\tvar result = \"\";\n\tfor (var i = s.length - 1; i > -1; --i) {\n\t\tresult += s.charAt(i);\n\t}\n\treturn result;\n};\n\nvar hexatrigesimalToChar = [\n\t'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n\t'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\n\t'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n\t'u', 'v', 'w', 'x', 'y', 'z'\n];\n\nRSAUtils.biToString = function(x, radix) { // 2 <= radix <= 36\n\tvar b = new BigInt();\n\tb.digits[0] = radix;\n\tvar qr = RSAUtils.biDivideModulo(x, b);\n\tvar result = hexatrigesimalToChar[qr[1].digits[0]];\n\twhile (RSAUtils.biCompare(qr[0], bigZero) == 1) {\n\t\tqr = RSAUtils.biDivideModulo(qr[0], b);\n\t\tdigit = qr[1].digits[0];\n\t\tresult += hexatrigesimalToChar[qr[1].digits[0]];\n\t}\n\treturn (x.isNeg ? \"-\" : \"\") + RSAUtils.reverseStr(result);\n};\n\nRSAUtils.biToDecimal = function(x) {\n\tvar b = new BigInt();\n\tb.digits[0] = 10;\n\tvar qr = RSAUtils.biDivideModulo(x, b);\n\tvar result = String(qr[1].digits[0]);\n\twhile (RSAUtils.biCompare(qr[0], bigZero) == 1) {\n\t\tqr = RSAUtils.biDivideModulo(qr[0], b);\n\t\tresult += String(qr[1].digits[0]);\n\t}\n\treturn (x.isNeg ? \"-\" : \"\") + RSAUtils.reverseStr(result);\n};\n\nvar hexToChar = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n        'a', 'b', 'c', 'd', 'e', 'f'];\n\nRSAUtils.digitToHex = function(n) {\n\tvar mask = 0xf;\n\tvar result = \"\";\n\tfor (var i = 0; i < 4; ++i) {\n\t\tresult += hexToChar[n & mask];\n\t\tn >>>= 4;\n\t}\n\treturn RSAUtils.reverseStr(result);\n};\n\nRSAUtils.biToHex = function(x) {\n\tvar result = \"\";\n\tvar n = RSAUtils.biHighIndex(x);\n\tfor (var i = RSAUtils.biHighIndex(x); i > -1; --i) {\n\t\tresult += RSAUtils.digitToHex(x.digits[i]);\n\t}\n\treturn result;\n};\n\nRSAUtils.charToHex = function(c) {\n\tvar ZERO = 48;\n\tvar NINE = ZERO + 9;\n\tvar littleA = 97;\n\tvar littleZ = littleA + 25;\n\tvar bigA = 65;\n\tvar bigZ = 65 + 25;\n\tvar result;\n\n\tif (c >= ZERO && c <= NINE) {\n\t\tresult = c - ZERO;\n\t} else if (c >= bigA && c <= bigZ) {\n\t\tresult = 10 + c - bigA;\n\t} else if (c >= littleA && c <= littleZ) {\n\t\tresult = 10 + c - littleA;\n\t} else {\n\t\tresult = 0;\n\t}\n\treturn result;\n};\n\nRSAUtils.hexToDigit = function(s) {\n\tvar result = 0;\n\tvar sl = Math.min(s.length, 4);\n\tfor (var i = 0; i < sl; ++i) {\n\t\tresult <<= 4;\n\t\tresult |= RSAUtils.charToHex(s.charCodeAt(i));\n\t}\n\treturn result;\n};\n\nRSAUtils.biFromHex = function(s) {\n\tvar result = new BigInt();\n\tvar sl = s.length;\n\tfor (var i = sl, j = 0; i > 0; i -= 4, ++j) {\n\t\tresult.digits[j] = RSAUtils.hexToDigit(s.substr(Math.max(i - 4, 0), Math.min(i, 4)));\n\t}\n\treturn result;\n};\n\nRSAUtils.biFromString = function(s, radix) {\n\tvar isNeg = s.charAt(0) == '-';\n\tvar istop = isNeg ? 1 : 0;\n\tvar result = new BigInt();\n\tvar place = new BigInt();\n\tplace.digits[0] = 1; // radix^0\n\tfor (var i = s.length - 1; i >= istop; i--) {\n\t\tvar c = s.charCodeAt(i);\n\t\tvar digit = RSAUtils.charToHex(c);\n\t\tvar biDigit = RSAUtils.biMultiplyDigit(place, digit);\n\t\tresult = RSAUtils.biAdd(result, biDigit);\n\t\tplace = RSAUtils.biMultiplyDigit(place, radix);\n\t}\n\tresult.isNeg = isNeg;\n\treturn result;\n};\n\nRSAUtils.biDump = function(b) {\n\treturn (b.isNeg ? \"-\" : \"\") + b.digits.join(\" \");\n};\n\nRSAUtils.biAdd = function(x, y) {\n\tvar result;\n\n\tif (x.isNeg != y.isNeg) {\n\t\ty.isNeg = !y.isNeg;\n\t\tresult = RSAUtils.biSubtract(x, y);\n\t\ty.isNeg = !y.isNeg;\n\t}\n\telse {\n\t\tresult = new BigInt();\n\t\tvar c = 0;\n\t\tvar n;\n\t\tfor (var i = 0; i < x.digits.length; ++i) {\n\t\t\tn = x.digits[i] + y.digits[i] + c;\n\t\t\tresult.digits[i] = n % biRadix;\n\t\t\tc = Number(n >= biRadix);\n\t\t}\n\t\tresult.isNeg = x.isNeg;\n\t}\n\treturn result;\n};\n\nRSAUtils.biSubtract = function(x, y) {\n\tvar result;\n\tif (x.isNeg != y.isNeg) {\n\t\ty.isNeg = !y.isNeg;\n\t\tresult = RSAUtils.biAdd(x, y);\n\t\ty.isNeg = !y.isNeg;\n\t} else {\n\t\tresult = new BigInt();\n\t\tvar n, c;\n\t\tc = 0;\n\t\tfor (var i = 0; i < x.digits.length; ++i) {\n\t\t\tn = x.digits[i] - y.digits[i] + c;\n\t\t\tresult.digits[i] = n % biRadix;\n\t\t\t// Stupid non-conforming modulus operation.\n\t\t\tif (result.digits[i] < 0) result.digits[i] += biRadix;\n\t\t\tc = 0 - Number(n < 0);\n\t\t}\n\t\t// Fix up the negative sign, if any.\n\t\tif (c == -1) {\n\t\t\tc = 0;\n\t\t\tfor (var i = 0; i < x.digits.length; ++i) {\n\t\t\t\tn = 0 - result.digits[i] + c;\n\t\t\t\tresult.digits[i] = n % biRadix;\n\t\t\t\t// Stupid non-conforming modulus operation.\n\t\t\t\tif (result.digits[i] < 0) result.digits[i] += biRadix;\n\t\t\t\tc = 0 - Number(n < 0);\n\t\t\t}\n\t\t\t// Result is opposite sign of arguments.\n\t\t\tresult.isNeg = !x.isNeg;\n\t\t} else {\n\t\t\t// Result is same sign.\n\t\t\tresult.isNeg = x.isNeg;\n\t\t}\n\t}\n\treturn result;\n};\n\nRSAUtils.biHighIndex = function(x) {\n\tvar result = x.digits.length - 1;\n\twhile (result > 0 && x.digits[result] == 0) --result;\n\treturn result;\n};\n\nRSAUtils.biNumBits = function(x) {\n\tvar n = RSAUtils.biHighIndex(x);\n\tvar d = x.digits[n];\n\tvar m = (n + 1) * bitsPerDigit;\n\tvar result;\n\tfor (result = m; result > m - bitsPerDigit; --result) {\n\t\tif ((d & 0x8000) != 0) break;\n\t\td <<= 1;\n\t}\n\treturn result;\n};\n\nRSAUtils.biMultiply = function(x, y) {\n\tvar result = new BigInt();\n\tvar c;\n\tvar n = RSAUtils.biHighIndex(x);\n\tvar t = RSAUtils.biHighIndex(y);\n\tvar u, uv, k;\n\n\tfor (var i = 0; i <= t; ++i) {\n\t\tc = 0;\n\t\tk = i;\n\t\tfor (let j = 0; j <= n; ++j, ++k) {\n\t\t\tuv = result.digits[k] + x.digits[j] * y.digits[i] + c;\n\t\t\tresult.digits[k] = uv & maxDigitVal;\n\t\t\tc = uv >>> biRadixBits;\n\t\t\t//c = Math.floor(uv / biRadix);\n\t\t}\n\t\tresult.digits[i + n + 1] = c;\n\t}\n\t// Someone give me a logical xor, please.\n\tresult.isNeg = x.isNeg != y.isNeg;\n\treturn result;\n};\n\nRSAUtils.biMultiplyDigit = function(x, y) {\n\tvar n, c, uv;\n\n\tvar result = new BigInt();\n\tn = RSAUtils.biHighIndex(x);\n\tc = 0;\n\tfor (var j = 0; j <= n; ++j) {\n\t\tuv = result.digits[j] + x.digits[j] * y + c;\n\t\tresult.digits[j] = uv & maxDigitVal;\n\t\tc = uv >>> biRadixBits;\n\t\t//c = Math.floor(uv / biRadix);\n\t}\n\tresult.digits[1 + n] = c;\n\treturn result;\n};\n\nRSAUtils.arrayCopy = function(src, srcStart, dest, destStart, n) {\n\tvar m = Math.min(srcStart + n, src.length);\n\tfor (var i = srcStart, j = destStart; i < m; ++i, ++j) {\n\t\tdest[j] = src[i];\n\t}\n};\n\nvar highBitMasks = [0x0000, 0x8000, 0xC000, 0xE000, 0xF000, 0xF800,\n        0xFC00, 0xFE00, 0xFF00, 0xFF80, 0xFFC0, 0xFFE0,\n        0xFFF0, 0xFFF8, 0xFFFC, 0xFFFE, 0xFFFF];\n\nRSAUtils.biShiftLeft = function(x, n) {\n\tvar digitCount = Math.floor(n / bitsPerDigit);\n\tvar result = new BigInt();\n\tRSAUtils.arrayCopy(x.digits, 0, result.digits, digitCount,\n\t          result.digits.length - digitCount);\n\tvar bits = n % bitsPerDigit;\n\tvar rightBits = bitsPerDigit - bits;\n\tfor (var i = result.digits.length - 1, i1 = i - 1; i > 0; --i, --i1) {\n\t\tresult.digits[i] = ((result.digits[i] << bits) & maxDigitVal) |\n\t\t                   ((result.digits[i1] & highBitMasks[bits]) >>>\n\t\t                    (rightBits));\n\t}\n\tresult.digits[0] = ((result.digits[i] << bits) & maxDigitVal);\n\tresult.isNeg = x.isNeg;\n\treturn result;\n};\n\nvar lowBitMasks = [0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F,\n        0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF,\n        0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF];\n\nRSAUtils.biShiftRight = function(x, n) {\n\tvar digitCount = Math.floor(n / bitsPerDigit);\n\tvar result = new BigInt();\n\tRSAUtils.arrayCopy(x.digits, digitCount, result.digits, 0,\n\t          x.digits.length - digitCount);\n\tvar bits = n % bitsPerDigit;\n\tvar leftBits = bitsPerDigit - bits;\n\tfor (var i = 0, i1 = i + 1; i < result.digits.length - 1; ++i, ++i1) {\n\t\tresult.digits[i] = (result.digits[i] >>> bits) |\n\t\t                   ((result.digits[i1] & lowBitMasks[bits]) << leftBits);\n\t}\n\tresult.digits[result.digits.length - 1] >>>= bits;\n\tresult.isNeg = x.isNeg;\n\treturn result;\n};\n\nRSAUtils.biMultiplyByRadixPower = function(x, n) {\n\tvar result = new BigInt();\n\tRSAUtils.arrayCopy(x.digits, 0, result.digits, n, result.digits.length - n);\n\treturn result;\n};\n\nRSAUtils.biDivideByRadixPower = function(x, n) {\n\tvar result = new BigInt();\n\tRSAUtils.arrayCopy(x.digits, n, result.digits, 0, result.digits.length - n);\n\treturn result;\n};\n\nRSAUtils.biModuloByRadixPower = function(x, n) {\n\tvar result = new BigInt();\n\tRSAUtils.arrayCopy(x.digits, 0, result.digits, 0, n);\n\treturn result;\n};\n\nRSAUtils.biCompare = function(x, y) {\n\tif (x.isNeg != y.isNeg) {\n\t\treturn 1 - 2 * Number(x.isNeg);\n\t}\n\tfor (var i = x.digits.length - 1; i >= 0; --i) {\n\t\tif (x.digits[i] != y.digits[i]) {\n\t\t\tif (x.isNeg) {\n\t\t\t\treturn 1 - 2 * Number(x.digits[i] > y.digits[i]);\n\t\t\t} else {\n\t\t\t\treturn 1 - 2 * Number(x.digits[i] < y.digits[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n};\n\nRSAUtils.biDivideModulo = function(x, y) {\n\tvar nb = RSAUtils.biNumBits(x);\n\tvar tb = RSAUtils.biNumBits(y);\n\tvar origYIsNeg = y.isNeg;\n\tvar q, r;\n\tif (nb < tb) {\n\t\t// |x| < |y|\n\t\tif (x.isNeg) {\n\t\t\tq = RSAUtils.biCopy(bigOne);\n\t\t\tq.isNeg = !y.isNeg;\n\t\t\tx.isNeg = false;\n\t\t\ty.isNeg = false;\n\t\t\tr = biSubtract(y, x);\n\t\t\t// Restore signs, 'cause they're references.\n\t\t\tx.isNeg = true;\n\t\t\ty.isNeg = origYIsNeg;\n\t\t} else {\n\t\t\tq = new BigInt();\n\t\t\tr = RSAUtils.biCopy(x);\n\t\t}\n\t\treturn [q, r];\n\t}\n\n\tq = new BigInt();\n\tr = x;\n\n\t// Normalize Y.\n\tvar t = Math.ceil(tb / bitsPerDigit) - 1;\n\tvar lambda = 0;\n\twhile (y.digits[t] < biHalfRadix) {\n\t\ty = RSAUtils.biShiftLeft(y, 1);\n\t\t++lambda;\n\t\t++tb;\n\t\tt = Math.ceil(tb / bitsPerDigit) - 1;\n\t}\n\t// Shift r over to keep the quotient constant. We'll shift the\n\t// remainder back at the end.\n\tr = RSAUtils.biShiftLeft(r, lambda);\n\tnb += lambda; // Update the bit count for x.\n\tvar n = Math.ceil(nb / bitsPerDigit) - 1;\n\n\tvar b = RSAUtils.biMultiplyByRadixPower(y, n - t);\n\twhile (RSAUtils.biCompare(r, b) != -1) {\n\t\t++q.digits[n - t];\n\t\tr = RSAUtils.biSubtract(r, b);\n\t}\n\tfor (var i = n; i > t; --i) {\n    var ri = (i >= r.digits.length) ? 0 : r.digits[i];\n    var ri1 = (i - 1 >= r.digits.length) ? 0 : r.digits[i - 1];\n    var ri2 = (i - 2 >= r.digits.length) ? 0 : r.digits[i - 2];\n    var yt = (t >= y.digits.length) ? 0 : y.digits[t];\n    var yt1 = (t - 1 >= y.digits.length) ? 0 : y.digits[t - 1];\n\t\tif (ri == yt) {\n\t\t\tq.digits[i - t - 1] = maxDigitVal;\n\t\t} else {\n\t\t\tq.digits[i - t - 1] = Math.floor((ri * biRadix + ri1) / yt);\n\t\t}\n\n\t\tvar c1 = q.digits[i - t - 1] * ((yt * biRadix) + yt1);\n\t\tvar c2 = (ri * biRadixSquared) + ((ri1 * biRadix) + ri2);\n\t\twhile (c1 > c2) {\n\t\t\t--q.digits[i - t - 1];\n\t\t\tc1 = q.digits[i - t - 1] * ((yt * biRadix) | yt1);\n\t\t\tc2 = (ri * biRadix * biRadix) + ((ri1 * biRadix) + ri2);\n\t\t}\n\n\t\tb = RSAUtils.biMultiplyByRadixPower(y, i - t - 1);\n\t\tr = RSAUtils.biSubtract(r, RSAUtils.biMultiplyDigit(b, q.digits[i - t - 1]));\n\t\tif (r.isNeg) {\n\t\t\tr = RSAUtils.biAdd(r, b);\n\t\t\t--q.digits[i - t - 1];\n\t\t}\n\t}\n\tr = RSAUtils.biShiftRight(r, lambda);\n\t// Fiddle with the signs and stuff to make sure that 0 <= r < y.\n\tq.isNeg = x.isNeg != origYIsNeg;\n\tif (x.isNeg) {\n\t\tif (origYIsNeg) {\n\t\t\tq = RSAUtils.biAdd(q, bigOne);\n\t\t} else {\n\t\t\tq = RSAUtils.biSubtract(q, bigOne);\n\t\t}\n\t\ty = RSAUtils.biShiftRight(y, lambda);\n\t\tr = RSAUtils.biSubtract(y, r);\n\t}\n\t// Check for the unbelievably stupid degenerate case of r == -0.\n\tif (r.digits[0] == 0 && RSAUtils.biHighIndex(r) == 0) r.isNeg = false;\n\n\treturn [q, r];\n};\n\nRSAUtils.biDivide = function(x, y) {\n\treturn RSAUtils.biDivideModulo(x, y)[0];\n};\n\nRSAUtils.biModulo = function(x, y) {\n\treturn RSAUtils.biDivideModulo(x, y)[1];\n};\n\nRSAUtils.biMultiplyMod = function(x, y, m) {\n\treturn RSAUtils.biModulo(RSAUtils.biMultiply(x, y), m);\n};\n\nRSAUtils.biPow = function(x, y) {\n\tvar result = bigOne;\n\tvar a = x;\n\twhile (true) {\n\t\tif ((y & 1) != 0) result = RSAUtils.biMultiply(result, a);\n\t\ty >>= 1;\n\t\tif (y == 0) break;\n\t\ta = RSAUtils.biMultiply(a, a);\n\t}\n\treturn result;\n};\n\nRSAUtils.biPowMod = function(x, y, m) {\n\tvar result = bigOne;\n\tvar a = x;\n\tvar k = y;\n\twhile (true) {\n\t\tif ((k.digits[0] & 1) != 0) result = RSAUtils.biMultiplyMod(result, a, m);\n\t\tk = RSAUtils.biShiftRight(k, 1);\n\t\tif (k.digits[0] == 0 && RSAUtils.biHighIndex(k) == 0) break;\n\t\ta = RSAUtils.biMultiplyMod(a, a, m);\n\t}\n\treturn result;\n};\n\n\n$w.BarrettMu = function(m) {\n\tthis.modulus = RSAUtils.biCopy(m);\n\tthis.k = RSAUtils.biHighIndex(this.modulus) + 1;\n\tvar b2k = new BigInt();\n\tb2k.digits[2 * this.k] = 1; // b2k = b^(2k)\n\tthis.mu = RSAUtils.biDivide(b2k, this.modulus);\n\tthis.bkplus1 = new BigInt();\n\tthis.bkplus1.digits[this.k + 1] = 1; // bkplus1 = b^(k+1)\n\tthis.modulo = BarrettMu_modulo;\n\tthis.multiplyMod = BarrettMu_multiplyMod;\n\tthis.powMod = BarrettMu_powMod;\n};\n\nfunction BarrettMu_modulo(x) {\n\tvar $dmath = RSAUtils;\n\tvar q1 = $dmath.biDivideByRadixPower(x, this.k - 1);\n\tvar q2 = $dmath.biMultiply(q1, this.mu);\n\tvar q3 = $dmath.biDivideByRadixPower(q2, this.k + 1);\n\tvar r1 = $dmath.biModuloByRadixPower(x, this.k + 1);\n\tvar r2term = $dmath.biMultiply(q3, this.modulus);\n\tvar r2 = $dmath.biModuloByRadixPower(r2term, this.k + 1);\n\tvar r = $dmath.biSubtract(r1, r2);\n\tif (r.isNeg) {\n\t\tr = $dmath.biAdd(r, this.bkplus1);\n\t}\n\tvar rgtem = $dmath.biCompare(r, this.modulus) >= 0;\n\twhile (rgtem) {\n\t\tr = $dmath.biSubtract(r, this.modulus);\n\t\trgtem = $dmath.biCompare(r, this.modulus) >= 0;\n\t}\n\treturn r;\n}\n\nfunction BarrettMu_multiplyMod(x, y) {\n\t/*\n\tx = this.modulo(x);\n\ty = this.modulo(y);\n\t*/\n\tvar xy = RSAUtils.biMultiply(x, y);\n\treturn this.modulo(xy);\n}\n\nfunction BarrettMu_powMod(x, y) {\n\tvar result = new BigInt();\n\tresult.digits[0] = 1;\n\tvar a = x;\n\tvar k = y;\n\twhile (true) {\n\t\tif ((k.digits[0] & 1) != 0) result = this.multiplyMod(result, a);\n\t\tk = RSAUtils.biShiftRight(k, 1);\n\t\tif (k.digits[0] == 0 && RSAUtils.biHighIndex(k) == 0) break;\n\t\ta = this.multiplyMod(a, a);\n\t}\n\treturn result;\n}\n\nvar RSAKeyPair = function(encryptionExponent, decryptionExponent, modulus) {\n\tvar $dmath = RSAUtils;\n\tthis.e = $dmath.biFromHex(encryptionExponent);\n\tthis.d = $dmath.biFromHex(decryptionExponent);\n\tthis.m = $dmath.biFromHex(modulus);\n\t// We can do two bytes per digit, so\n\t// chunkSize = 2 * (number of digits in modulus - 1).\n\t// Since biHighIndex returns the high index, not the number of digits, 1 has\n\t// already been subtracted.\n\tthis.chunkSize = 2 * $dmath.biHighIndex(this.m);\n\tthis.radix = 16;\n\tthis.barrett = new $w.BarrettMu(this.m);\n};\n\nRSAUtils.getKeyPair = function(encryptionExponent, decryptionExponent, modulus) {\n\treturn new RSAKeyPair(encryptionExponent, decryptionExponent, modulus);\n};\n\nif(typeof $w.twoDigit === 'undefined') {\n\t$w.twoDigit = function(n) {\n\t\treturn (n < 10 ? \"0\" : \"\") + String(n);\n\t};\n}\n\n// Altered by Rob Saunders (rob@robsaunders.net). New routine pads the\n// string after it has been converted to an array. This fixes an\n// incompatibility with Flash MX's ActionScript.\nRSAUtils.encryptedString = function(key, s) {\n\tvar a = [];\n\tvar sl = s.length;\n\tvar i = 0;\n\twhile (i < sl) {\n\t\ta[i] = s.charCodeAt(i);\n\t\ti++;\n\t}\n\n\twhile (a.length % key.chunkSize != 0) {\n\t\ta[i++] = 0;\n\t}\n\n\tvar al = a.length;\n\tvar result = \"\";\n\tvar j, k, block;\n\tfor (i = 0; i < al; i += key.chunkSize) {\n\t\tblock = new BigInt();\n\t\tj = 0;\n\t\tfor (k = i; k < i + key.chunkSize; ++j) {\n\t\t\tblock.digits[j] = a[k++];\n\t\t\tblock.digits[j] += a[k++] << 8;\n\t\t}\n\t\tvar crypt = key.barrett.powMod(block, key.e);\n\t\tvar text = key.radix == 16 ? RSAUtils.biToHex(crypt) : RSAUtils.biToString(crypt, key.radix);\n\t\tresult += text + \" \";\n\t}\n\treturn result.substring(0, result.length - 1); // Remove last space.\n};\n\nRSAUtils.decryptedString = function(key, s) {\n\tvar blocks = s.split(\" \");\n\tvar result = \"\";\n\tvar i, j, block;\n\tfor (i = 0; i < blocks.length; ++i) {\n\t\tvar bi;\n\t\tif (key.radix == 16) {\n\t\t\tbi = RSAUtils.biFromHex(blocks[i]);\n\t\t}\n\t\telse {\n\t\t\tbi = RSAUtils.biFromString(blocks[i], key.radix);\n\t\t}\n\t\tblock = key.barrett.powMod(bi, key.d);\n\t\tfor (j = 0; j <= RSAUtils.biHighIndex(block); ++j) {\n\t\t\tresult += String.fromCharCode(block.digits[j] & 255,\n\t\t\t                              block.digits[j] >> 8);\n\t\t}\n\t}\n\t// Remove trailing null, if any.\n\tif (result.charCodeAt(result.length - 1) == 0) {\n\t\tresult = result.substring(0, result.length - 1);\n\t}\n\treturn result;\n};\n\nRSAUtils.setMaxDigits(130);\nreturn RSAUtils;\n\n})(window);\n\nexport {\n\tRSAUtils\n}"]}]}