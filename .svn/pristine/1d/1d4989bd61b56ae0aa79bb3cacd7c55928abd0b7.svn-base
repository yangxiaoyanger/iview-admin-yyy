{"remainingRequest":"D:\\iview-admin-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\iview-admin-master\\src\\components\\cropper\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\iview-admin-master\\src\\components\\cropper\\index.vue","mtime":1560231513000},{"path":"D:\\iview-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Cropper from 'cropperjs'\nimport './index.less'\nimport 'cropperjs/dist/cropper.min.css'\nexport default {\n  name: 'Cropper',\n  props: {\n    src: {\n      type: String,\n      default: ''\n    },\n    preview: {\n      type: Boolean,\n      default: true\n    },\n    moveStep: {\n      type: Number,\n      default: 4\n    },\n    cropButtonText: {\n      type: String,\n      default: '裁剪'\n    }\n  },\n  data () {\n    return {\n      cropper: null,\n      insideSrc: ''\n    }\n  },\n  computed: {\n    imgId () {\n      return `cropper${this._uid}`\n    },\n    previewId () {\n      return `cropper_preview${this._uid}`\n    }\n  },\n  watch: {\n    src (src) {\n      this.replace(src)\n    },\n    insideSrc (src) {\n      this.replace(src)\n    }\n  },\n  methods: {\n    beforeUpload (file) {\n      const reader = new FileReader()\n      reader.readAsDataURL(file)\n      reader.onload = (event) => {\n        this.insideSrc = event.srcElement.result\n      }\n      return false\n    },\n    replace (src) {\n      this.cropper.replace(src)\n      this.insideSrc = src\n    },\n    rotate () {\n      this.cropper.rotate(90)\n    },\n    shrink () {\n      this.cropper.zoom(-0.1)\n    },\n    magnify () {\n      this.cropper.zoom(0.1)\n    },\n    scale (d) {\n      this.cropper[`scale${d}`](-this.cropper.getData()[`scale${d}`])\n    },\n    move (...argu) {\n      this.cropper.move(...argu)\n    },\n    crop () {\n      this.cropper.getCroppedCanvas().toBlob(blob => {\n        this.$emit('on-crop', blob)\n      })\n    }\n  },\n  mounted () {\n    this.$nextTick(() => {\n      let dom = document.getElementById(this.imgId)\n      this.cropper = new Cropper(dom, {\n        preview: `#${this.previewId}`,\n        checkCrossOrigin: true\n      })\n    })\n  }\n}\n",null]}