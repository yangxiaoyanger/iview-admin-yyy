{"remainingRequest":"D:\\iview-admin-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\iview-admin-master\\src\\components\\main\\submain.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\iview-admin-master\\src\\components\\main\\submain.vue","mtime":1562900528449},{"path":"D:\\iview-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport SideMenu from './components/side-menu'\r\nimport HeaderBar from './components/header-bar'\r\nimport customBreadCrumb from './components/custom-bread-crumb'\r\nimport TagsNav from './components/tags-nav'\r\nimport User from './components/user'\r\nimport ABackTop from './components/a-back-top'\r\nimport Fullscreen from './components/fullscreen'\r\nimport Language from './components/language'\r\nimport ErrorStore from './components/error-store'\r\nimport { mapMutations, mapActions, mapGetters } from 'vuex'\r\nimport { getNewTagList, routeEqual, getFirstChildForMenuByRequest } from '@/libs/util'\r\nimport routers from '@/router/routers'\r\nimport minLogo from '@/assets/images/logo-min.jpg'\r\nimport maxLogo from '@/assets/images/logo.jpg'\r\nimport './main.less'\r\nimport { constants } from 'crypto';\r\nimport { stat } from 'fs';\r\nexport default {\r\n  name: 'SubMain',\r\n  components: {\r\n    SideMenu,\r\n    HeaderBar,\r\n    customBreadCrumb,\r\n    Language,\r\n    TagsNav,\r\n    Fullscreen,\r\n    ErrorStore,\r\n    User,\r\n    ABackTop\r\n  },\r\n  data () {\r\n    return {\r\n      collapsed: false,\r\n      minLogo,\r\n      maxLogo,\r\n      isFullscreen: false\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters([\r\n      'errorCount'\r\n    ]),\r\n    tagNavList () {\r\n      return this.$store.state.app.tagNavList\r\n    },\r\n    breadCrumbList () {\r\n      return this.$store.state.app.breadCrumbList\r\n    },\r\n    sidemenuList () {\r\n      return this.$store.getters.sidemenuList\r\n    },\r\n    tagRouter () {\r\n      return this.$store.state.app.tagRouter\r\n    },\r\n    userAvatar () {\r\n      return this.$store.state.user.avatarImgPath\r\n    },\r\n    cacheList () {\r\n      const list = ['ParentView', ...this.tagNavList.length ? this.tagNavList.filter(item => !(item.meta && item.meta.notCache)).map(item => item.name) : []]\r\n      return list\r\n    },\r\n    menuList () {\r\n      return this.$store.getters.menuList\r\n    },\r\n    local () {\r\n      return this.$store.state.app.local\r\n    },\r\n    hasReadErrorPage () {\r\n      return this.$store.state.app.hasReadErrorPage\r\n    },\r\n    unreadCount () {\r\n      return this.$store.state.user.unreadCount\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapMutations([\r\n      'setBreadCrumb',\r\n      'setTagNavList',\r\n      'addTag',\r\n      'setLocal',\r\n      'setHomeRoute',\r\n      'closeTag',\r\n      'setSidemenuList'\r\n    ]),\r\n    ...mapActions([\r\n      'handleLogin',\r\n      'getUnreadMessageCount',\r\n      'setNavMenu',\r\n      'setSidemenuList'\r\n    ]),\r\n    selectNav (name) {\r\n      this.setNavMenu(name)\r\n      this.setSidemenuList(name)\r\n      this.$router.push({\r\n        name: getFirstChildForMenuByRequest(this.$store.getters.routes, name).name\r\n      })\r\n    },\r\n    turnToPage (route) {\r\n      let { name, params, query } = {}\r\n      if (typeof route === 'string') name = route\r\n      else {\r\n        name = route.name\r\n        params = route.params\r\n        query = route.query\r\n      }\r\n      if (name.indexOf('isTurnByHref_') > -1) {\r\n        window.open(name.split('_')[1])\r\n        return\r\n      }\r\n      this.$router.push({\r\n        name,\r\n        params,\r\n        query\r\n      })\r\n    },\r\n    handleCollapsedChange (state) {\r\n      this.collapsed = state\r\n    },\r\n    handleCloseTag (res, type, route) {\r\n      if (type !== 'others') {\r\n        if (type === 'all') {\r\n          this.turnToPage(this.$config.homeName)\r\n        } else {\r\n          if (routeEqual(this.$route, route)) {\r\n            this.closeTag(route)\r\n          }\r\n        }\r\n      }\r\n      this.setTagNavList(res)\r\n    },\r\n    handleClick (item) {\r\n      this.turnToPage(item)\r\n    }\r\n  },\r\n  watch: {\r\n    '$route' (newRoute) {\r\n      const { name, query, params, meta } = newRoute\r\n      this.addTag({\r\n        route: { name, query, params, meta },\r\n        type: 'push'\r\n      })\r\n      this.setBreadCrumb(newRoute)\r\n      this.setTagNavList(getNewTagList(this.tagNavList, newRoute))\r\n      this.$refs.sideMenu.updateOpenName(newRoute.name)\r\n    }\r\n  },\r\n  mounted () {\r\n    /**\r\n     * @description 初始化设置面包屑导航和标签导航\r\n     */\r\n    this.setTagNavList()\r\n    this.setHomeRoute(this.$store.getters.routes)\r\n    const { name, params, query, meta } = this.$route\r\n    this.addTag({\r\n      route: { name, params, query, meta }\r\n    })\r\n    \r\n    this.setBreadCrumb(this.$route)\r\n    // 设置初始语言\r\n    this.setLocal(this.$i18n.locale)\r\n    // 如果当前打开页面不在标签栏中，跳到homeName页\r\n    if (!this.tagNavList.find(item => item.name === this.$route.name)) {\r\n      this.$router.push({\r\n        name: this.$config.homeName\r\n      })\r\n    }\r\n    // 获取未读消息条数\r\n    this.getUnreadMessageCount()\r\n  }\r\n}\r\n",{"version":3,"sources":["submain.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"submain.vue","sourceRoot":"src/components/main","sourcesContent":["<template>\r\n   <Layout style=\"height: 100%\" class=\"main\">\r\n      <Sider v-show=\"sidemenuList.length > 0\"  hide-trigger collapsible :width=\"256\" :collapsed-width=\"64\" v-model=\"collapsed\" class=\"left-sider\" :style=\"{overflow: 'hidden'}\">\r\n        <side-menu  @on-coll-change=\"handleCollapsedChange\" accordion ref=\"sideMenu\" :active-name=\"$route.name\" :collapsed=\"collapsed\" @on-select=\"turnToPage\" :menu-list=\"sidemenuList\">\r\n\r\n        </side-menu>\r\n      </Sider>\r\n      <Content class=\"main-content-con\">\r\n        <Layout class=\"main-layout-con\">\r\n          <!-- <div class=\"tag-nav-wrapper\">\r\n            <tags-nav :value=\"$route\" @input=\"handleClick\" :list=\"tagNavList\" @on-close=\"handleCloseTag\"/>\r\n          </div> -->\r\n          <custom-bread-crumb show-icon :list=\"breadCrumbList\"></custom-bread-crumb>\r\n          <Content class=\"content-wrapper\">\r\n            <keep-alive :include=\"cacheList\">\r\n              <router-view/>\r\n            </keep-alive>\r\n            <ABackTop :height=\"100\" :bottom=\"80\" :right=\"50\" container=\".content-wrapper\"></ABackTop>\r\n          </Content>\r\n        </Layout>\r\n      </Content>\r\n    </Layout>\r\n</template>\r\n<script>\r\nimport SideMenu from './components/side-menu'\r\nimport HeaderBar from './components/header-bar'\r\nimport customBreadCrumb from './components/custom-bread-crumb'\r\nimport TagsNav from './components/tags-nav'\r\nimport User from './components/user'\r\nimport ABackTop from './components/a-back-top'\r\nimport Fullscreen from './components/fullscreen'\r\nimport Language from './components/language'\r\nimport ErrorStore from './components/error-store'\r\nimport { mapMutations, mapActions, mapGetters } from 'vuex'\r\nimport { getNewTagList, routeEqual, getFirstChildForMenuByRequest } from '@/libs/util'\r\nimport routers from '@/router/routers'\r\nimport minLogo from '@/assets/images/logo-min.jpg'\r\nimport maxLogo from '@/assets/images/logo.jpg'\r\nimport './main.less'\r\nimport { constants } from 'crypto';\r\nimport { stat } from 'fs';\r\nexport default {\r\n  name: 'SubMain',\r\n  components: {\r\n    SideMenu,\r\n    HeaderBar,\r\n    customBreadCrumb,\r\n    Language,\r\n    TagsNav,\r\n    Fullscreen,\r\n    ErrorStore,\r\n    User,\r\n    ABackTop\r\n  },\r\n  data () {\r\n    return {\r\n      collapsed: false,\r\n      minLogo,\r\n      maxLogo,\r\n      isFullscreen: false\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters([\r\n      'errorCount'\r\n    ]),\r\n    tagNavList () {\r\n      return this.$store.state.app.tagNavList\r\n    },\r\n    breadCrumbList () {\r\n      return this.$store.state.app.breadCrumbList\r\n    },\r\n    sidemenuList () {\r\n      return this.$store.getters.sidemenuList\r\n    },\r\n    tagRouter () {\r\n      return this.$store.state.app.tagRouter\r\n    },\r\n    userAvatar () {\r\n      return this.$store.state.user.avatarImgPath\r\n    },\r\n    cacheList () {\r\n      const list = ['ParentView', ...this.tagNavList.length ? this.tagNavList.filter(item => !(item.meta && item.meta.notCache)).map(item => item.name) : []]\r\n      return list\r\n    },\r\n    menuList () {\r\n      return this.$store.getters.menuList\r\n    },\r\n    local () {\r\n      return this.$store.state.app.local\r\n    },\r\n    hasReadErrorPage () {\r\n      return this.$store.state.app.hasReadErrorPage\r\n    },\r\n    unreadCount () {\r\n      return this.$store.state.user.unreadCount\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapMutations([\r\n      'setBreadCrumb',\r\n      'setTagNavList',\r\n      'addTag',\r\n      'setLocal',\r\n      'setHomeRoute',\r\n      'closeTag',\r\n      'setSidemenuList'\r\n    ]),\r\n    ...mapActions([\r\n      'handleLogin',\r\n      'getUnreadMessageCount',\r\n      'setNavMenu',\r\n      'setSidemenuList'\r\n    ]),\r\n    selectNav (name) {\r\n      this.setNavMenu(name)\r\n      this.setSidemenuList(name)\r\n      this.$router.push({\r\n        name: getFirstChildForMenuByRequest(this.$store.getters.routes, name).name\r\n      })\r\n    },\r\n    turnToPage (route) {\r\n      let { name, params, query } = {}\r\n      if (typeof route === 'string') name = route\r\n      else {\r\n        name = route.name\r\n        params = route.params\r\n        query = route.query\r\n      }\r\n      if (name.indexOf('isTurnByHref_') > -1) {\r\n        window.open(name.split('_')[1])\r\n        return\r\n      }\r\n      this.$router.push({\r\n        name,\r\n        params,\r\n        query\r\n      })\r\n    },\r\n    handleCollapsedChange (state) {\r\n      this.collapsed = state\r\n    },\r\n    handleCloseTag (res, type, route) {\r\n      if (type !== 'others') {\r\n        if (type === 'all') {\r\n          this.turnToPage(this.$config.homeName)\r\n        } else {\r\n          if (routeEqual(this.$route, route)) {\r\n            this.closeTag(route)\r\n          }\r\n        }\r\n      }\r\n      this.setTagNavList(res)\r\n    },\r\n    handleClick (item) {\r\n      this.turnToPage(item)\r\n    }\r\n  },\r\n  watch: {\r\n    '$route' (newRoute) {\r\n      const { name, query, params, meta } = newRoute\r\n      this.addTag({\r\n        route: { name, query, params, meta },\r\n        type: 'push'\r\n      })\r\n      this.setBreadCrumb(newRoute)\r\n      this.setTagNavList(getNewTagList(this.tagNavList, newRoute))\r\n      this.$refs.sideMenu.updateOpenName(newRoute.name)\r\n    }\r\n  },\r\n  mounted () {\r\n    /**\r\n     * @description 初始化设置面包屑导航和标签导航\r\n     */\r\n    this.setTagNavList()\r\n    this.setHomeRoute(this.$store.getters.routes)\r\n    const { name, params, query, meta } = this.$route\r\n    this.addTag({\r\n      route: { name, params, query, meta }\r\n    })\r\n    \r\n    this.setBreadCrumb(this.$route)\r\n    // 设置初始语言\r\n    this.setLocal(this.$i18n.locale)\r\n    // 如果当前打开页面不在标签栏中，跳到homeName页\r\n    if (!this.tagNavList.find(item => item.name === this.$route.name)) {\r\n      this.$router.push({\r\n        name: this.$config.homeName\r\n      })\r\n    }\r\n    // 获取未读消息条数\r\n    this.getUnreadMessageCount()\r\n  }\r\n}\r\n</script>\r\n"]}]}