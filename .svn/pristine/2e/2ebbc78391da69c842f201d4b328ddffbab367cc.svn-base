{"remainingRequest":"D:\\iview-admin-master\\node_modules\\babel-loader\\lib\\index.js!D:\\iview-admin-master\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\iview-admin-master\\src\\store\\module\\user.js","dependencies":[{"path":"D:\\iview-admin-master\\src\\store\\module\\user.js","mtime":1562822833077},{"path":"D:\\iview-admin-master\\.babelrc","mtime":1560231513000},{"path":"D:\\iview-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.array.find-index\";\nimport { login, getPublicKey as _getPublicKey, logout, getNav as _getNav, getUserInfo, getMessage, getContentByMsgId as _getContentByMsgId, hasRead as _hasRead, removeReaded as _removeReaded, restoreTrash as _restoreTrash, getUnreadCount } from '@/api/user';\nimport { setToken as _setToken, getToken, filterAsyncRouter } from '@/libs/util';\nimport { RSAUtils } from '@/libs/security';\nvar getRouter;\nexport default {\n  state: {\n    modulus: '',\n    exponent: '',\n    userName: '',\n    userId: '',\n    userInfo: {},\n    avatarImgPath: '',\n    token: getToken(),\n    access: '',\n    hasGetInfo: false,\n    unreadCount: 0,\n    messageUnreadList: [],\n    messageReadedList: [],\n    messageTrashList: [],\n    messageContentStore: {}\n  },\n  mutations: {\n    setExponent: function setExponent(state, exponent) {\n      state.exponent = exponent;\n    },\n    setModulus: function setModulus(state, modulus) {\n      state.modulus = modulus;\n    },\n    setUserInfo: function setUserInfo(state, userInfo) {\n      state.userInfo = userInfo;\n    },\n    setRoutes: function setRoutes(state, routes) {\n      state.routes = routes;\n    },\n    setAvatar: function setAvatar(state, avatarPath) {\n      state.avatarImgPath = avatarPath;\n    },\n    setUserId: function setUserId(state, id) {\n      state.userId = id;\n    },\n    setUserName: function setUserName(state, name) {\n      state.userName = name;\n    },\n    setAccess: function setAccess(state, access) {\n      state.access = access;\n    },\n    setToken: function setToken(state, token) {\n      state.token = token;\n\n      _setToken(token);\n    },\n    setHasGetInfo: function setHasGetInfo(state, status) {\n      state.hasGetInfo = status;\n    },\n    setMessageCount: function setMessageCount(state, count) {\n      state.unreadCount = count;\n    },\n    setMessageUnreadList: function setMessageUnreadList(state, list) {\n      state.messageUnreadList = list;\n    },\n    setMessageReadedList: function setMessageReadedList(state, list) {\n      state.messageReadedList = list;\n    },\n    setMessageTrashList: function setMessageTrashList(state, list) {\n      state.messageTrashList = list;\n    },\n    updateMessageContentStore: function updateMessageContentStore(state, _ref) {\n      var msg_id = _ref.msg_id,\n          content = _ref.content;\n      state.messageContentStore[msg_id] = content;\n    },\n    moveMsg: function moveMsg(state, _ref2) {\n      var from = _ref2.from,\n          to = _ref2.to,\n          msg_id = _ref2.msg_id;\n      var index = state[from].findIndex(function (_) {\n        return _.msg_id === msg_id;\n      });\n      var msgItem = state[from].splice(index, 1)[0];\n      msgItem.loading = false;\n      state[to].unshift(msgItem);\n    }\n  },\n  getters: {\n    messageUnreadCount: function messageUnreadCount(state) {\n      return state.messageUnreadList.length;\n    },\n    messageReadedCount: function messageReadedCount(state) {\n      return state.messageReadedList.length;\n    },\n    messageTrashCount: function messageTrashCount(state) {\n      return state.messageTrashList.length;\n    },\n    routes: function routes(state) {\n      return state.routes;\n    }\n  },\n  actions: {\n    // 获取getPublicKey\n    getPublicKey: function getPublicKey(_ref3) {\n      var commit = _ref3.commit;\n      return new Promise(function (resolve, reject) {\n        _getPublicKey().then(function (res) {\n          commit('setModulus', res.data.data.modulus);\n          commit('setExponent', res.data.data.exponent); // this.setToken(res.data.data.token)\n\n          resolve(res);\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n    },\n    // 登录\n    handleLogin: function handleLogin(_ref4, _ref5) {\n      var state = _ref4.state,\n          commit = _ref4.commit;\n      var userName = _ref5.userName,\n          password = _ref5.password;\n      userName = userName.trim();\n      var k = RSAUtils.getKeyPair(state.exponent, '', state.modulus);\n      var k2 = 'name=' + userName + '&pwd=' + password;\n      var key = RSAUtils.encryptedString(k, k2);\n      return new Promise(function (resolve, reject) {\n        login(key).then(function (res) {\n          var data = res.data;\n          commit('setUserInfo', res.data.data);\n          commit('setToken', data.token);\n          commit('setHasGetInfo', true);\n          resolve(data);\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n    },\n    // 退出登录\n    handleLogOut: function handleLogOut(_ref6) {\n      var state = _ref6.state,\n          commit = _ref6.commit;\n      return new Promise(function (resolve, reject) {\n        logout(state.token).then(function () {\n          commit('setToken', '');\n          commit('setAccess', []);\n          resolve();\n        }).catch(function (err) {\n          reject(err);\n        }); // 如果你的退出登录无需请求接口，则可以直接使用下面三行代码而无需使用logout调用接口\n        // commit('setToken', '')\n        // commit('setAccess', [])\n        // resolve()\n      });\n    },\n    // 获取用户相关信息\n    getUserInfo: function getUserInfo(_ref7) {\n      var state = _ref7.state,\n          commit = _ref7.commit;\n      commit('setHasGetInfo', true);\n      return state.userInfo; // return new Promise((resolve, reject) => {\n      //   try {\n      //     getUserInfo(state.token).then(res => {\n      //       const data = res.data\n      //       commit('setAvatar', data.avatar)\n      //       commit('setUserName', data.name)\n      //       commit('setUserId', data.user_id)\n      //       commit('setAccess', data.access)\n      //       commit('setHasGetInfo', true)\n      //       resolve(data)\n      //     }).catch(err => {\n      //       reject(err)\n      //     })\n      //   } catch (error) {\n      //     reject(error)\n      //   }\n      // })\n    },\n    // 获取用户菜单\n    getNav: function getNav(_ref8) {\n      var state = _ref8.state,\n          commit = _ref8.commit,\n          router = _ref8.router;\n      return new Promise(function (resolve, reject) {\n        try {\n          _getNav().then(function (res) {\n            getRouter = res.data.data.router;\n            getRouter = filterAsyncRouter(getRouter);\n            commit('setRoutes', getRouter);\n            resolve(getRouter);\n          }).catch(function (err) {\n            reject(err);\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    },\n    // 此方法用来获取未读消息条数，接口只返回数值，不返回消息列表\n    getUnreadMessageCount: function getUnreadMessageCount(_ref9) {\n      var state = _ref9.state,\n          commit = _ref9.commit;\n      getUnreadCount().then(function (res) {\n        var data = res.data;\n        commit('setMessageCount', data);\n      });\n    },\n    // 获取消息列表，其中包含未读、已读、回收站三个列表\n    getMessageList: function getMessageList(_ref10) {\n      var state = _ref10.state,\n          commit = _ref10.commit;\n      return new Promise(function (resolve, reject) {\n        getMessage().then(function (res) {\n          var _res$data = res.data,\n              unread = _res$data.unread,\n              readed = _res$data.readed,\n              trash = _res$data.trash;\n          commit('setMessageUnreadList', unread.sort(function (a, b) {\n            return new Date(b.create_time) - new Date(a.create_time);\n          }));\n          commit('setMessageReadedList', readed.map(function (_) {\n            _.loading = false;\n            return _;\n          }).sort(function (a, b) {\n            return new Date(b.create_time) - new Date(a.create_time);\n          }));\n          commit('setMessageTrashList', trash.map(function (_) {\n            _.loading = false;\n            return _;\n          }).sort(function (a, b) {\n            return new Date(b.create_time) - new Date(a.create_time);\n          }));\n          resolve();\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    // 根据当前点击的消息的id获取内容\n    getContentByMsgId: function getContentByMsgId(_ref11, _ref12) {\n      var state = _ref11.state,\n          commit = _ref11.commit;\n      var msg_id = _ref12.msg_id;\n      return new Promise(function (resolve, reject) {\n        var contentItem = state.messageContentStore[msg_id];\n\n        if (contentItem) {\n          resolve(contentItem);\n        } else {\n          _getContentByMsgId(msg_id).then(function (res) {\n            var content = res.data;\n            commit('updateMessageContentStore', {\n              msg_id: msg_id,\n              content: content\n            });\n            resolve(content);\n          });\n        }\n      });\n    },\n    // 把一个未读消息标记为已读\n    hasRead: function hasRead(_ref13, _ref14) {\n      var state = _ref13.state,\n          commit = _ref13.commit;\n      var msg_id = _ref14.msg_id;\n      return new Promise(function (resolve, reject) {\n        _hasRead(msg_id).then(function () {\n          commit('moveMsg', {\n            from: 'messageUnreadList',\n            to: 'messageReadedList',\n            msg_id: msg_id\n          });\n          commit('setMessageCount', state.unreadCount - 1);\n          resolve();\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    // 删除一个已读消息到回收站\n    removeReaded: function removeReaded(_ref15, _ref16) {\n      var commit = _ref15.commit;\n      var msg_id = _ref16.msg_id;\n      return new Promise(function (resolve, reject) {\n        _removeReaded(msg_id).then(function () {\n          commit('moveMsg', {\n            from: 'messageReadedList',\n            to: 'messageTrashList',\n            msg_id: msg_id\n          });\n          resolve();\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    // 还原一个已删除消息到已读消息\n    restoreTrash: function restoreTrash(_ref17, _ref18) {\n      var commit = _ref17.commit;\n      var msg_id = _ref18.msg_id;\n      return new Promise(function (resolve, reject) {\n        _restoreTrash(msg_id).then(function () {\n          commit('moveMsg', {\n            from: 'messageTrashList',\n            to: 'messageReadedList',\n            msg_id: msg_id\n          });\n          resolve();\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    }\n  }\n};",{"version":3,"sources":["D:\\iview-admin-master\\src\\store\\module\\user.js"],"names":["login","getPublicKey","logout","getNav","getUserInfo","getMessage","getContentByMsgId","hasRead","removeReaded","restoreTrash","getUnreadCount","setToken","getToken","filterAsyncRouter","RSAUtils","getRouter","state","modulus","exponent","userName","userId","userInfo","avatarImgPath","token","access","hasGetInfo","unreadCount","messageUnreadList","messageReadedList","messageTrashList","messageContentStore","mutations","setExponent","setModulus","setUserInfo","setRoutes","routes","setAvatar","avatarPath","setUserId","id","setUserName","name","setAccess","setHasGetInfo","status","setMessageCount","count","setMessageUnreadList","list","setMessageReadedList","setMessageTrashList","updateMessageContentStore","msg_id","content","moveMsg","from","to","index","findIndex","_","msgItem","splice","loading","unshift","getters","messageUnreadCount","length","messageReadedCount","messageTrashCount","actions","commit","Promise","resolve","reject","then","res","data","catch","err","handleLogin","password","trim","k","getKeyPair","k2","key","encryptedString","handleLogOut","router","error","getUnreadMessageCount","getMessageList","unread","readed","trash","sort","a","b","Date","create_time","map","contentItem"],"mappings":"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","sourcesContent":["import {\n  login,\n  getPublicKey,\n  logout,\n  getNav,\n  getUserInfo,\n  getMessage,\n  getContentByMsgId,\n  hasRead,\n  removeReaded,\n  restoreTrash,\n  getUnreadCount\n} from '@/api/user'\nimport { setToken, getToken, filterAsyncRouter } from '@/libs/util'\nimport { RSAUtils } from '@/libs/security'\nvar getRouter\nexport default {\n  state: {\n    modulus: '',\n    exponent: '',\n    userName: '',\n    userId: '',\n    userInfo: {},\n    avatarImgPath: '',\n    token: getToken(),\n    access: '',\n    hasGetInfo: false,\n    unreadCount: 0,\n    messageUnreadList: [],\n    messageReadedList: [],\n    messageTrashList: [],\n    messageContentStore: {}\n  },\n  mutations: {\n    setExponent (state, exponent) {\n      state.exponent = exponent\n    },\n    setModulus (state, modulus) {\n      state.modulus = modulus\n    },\n    setUserInfo (state, userInfo) {\n      state.userInfo = userInfo\n    },\n    setRoutes (state, routes) {\n      state.routes = routes\n    },\n    setAvatar (state, avatarPath) {\n      state.avatarImgPath = avatarPath\n    },\n    setUserId (state, id) {\n      state.userId = id\n    },\n    setUserName (state, name) {\n      state.userName = name\n    },\n    setAccess (state, access) {\n      state.access = access\n    },\n    setToken (state, token) {\n      state.token = token\n      setToken(token)\n    },\n    setHasGetInfo (state, status) {\n      state.hasGetInfo = status\n    },\n    setMessageCount (state, count) {\n      state.unreadCount = count\n    },\n    setMessageUnreadList (state, list) {\n      state.messageUnreadList = list\n    },\n    setMessageReadedList (state, list) {\n      state.messageReadedList = list\n    },\n    setMessageTrashList (state, list) {\n      state.messageTrashList = list\n    },\n    updateMessageContentStore (state, { msg_id, content }) {\n      state.messageContentStore[msg_id] = content\n    },\n    moveMsg (state, { from, to, msg_id }) {\n      const index = state[from].findIndex(_ => _.msg_id === msg_id)\n      const msgItem = state[from].splice(index, 1)[0]\n      msgItem.loading = false\n      state[to].unshift(msgItem)\n    }\n  },\n  getters: {\n    messageUnreadCount: state => state.messageUnreadList.length,\n    messageReadedCount: state => state.messageReadedList.length,\n    messageTrashCount: state => state.messageTrashList.length,\n    routes: state => state.routes\n  },\n  actions: {\n    // 获取getPublicKey\n    getPublicKey ({ commit }) {\n      return new Promise((resolve, reject) => {\n        getPublicKey().then(res => {\n          commit('setModulus', res.data.data.modulus)\n          commit('setExponent', res.data.data.exponent)\n          // this.setToken(res.data.data.token)\n          resolve(res)\n        }).catch(err => {\n          reject(err)\n        })\n      })\n    },\n    // 登录\n    handleLogin ({ state, commit }, { userName, password }) {\n      userName = userName.trim()\n      var k = RSAUtils.getKeyPair(state.exponent, '', state.modulus)\n      var k2 = 'name=' + userName + '&pwd=' + password\n      var key = RSAUtils.encryptedString(k, k2)\n      return new Promise((resolve, reject) => {\n        login(key).then(res => {\n          const data = res.data\n          commit('setUserInfo', res.data.data)\n          commit('setToken', data.token)\n          commit('setHasGetInfo', true)\n          resolve(data)\n        }).catch(err => {\n          reject(err)\n        })\n      })\n    },\n    // 退出登录\n    handleLogOut ({ state, commit }) {\n      return new Promise((resolve, reject) => {\n        logout(state.token).then(() => {\n          commit('setToken', '')\n          commit('setAccess', [])\n          resolve()\n        }).catch(err => {\n          reject(err)\n        })\n        // 如果你的退出登录无需请求接口，则可以直接使用下面三行代码而无需使用logout调用接口\n        // commit('setToken', '')\n        // commit('setAccess', [])\n        // resolve()\n      })\n    },\n    // 获取用户相关信息\n    getUserInfo ({ state, commit }) {\n      commit('setHasGetInfo', true)\n      return state.userInfo\n      // return new Promise((resolve, reject) => {\n      //   try {\n      //     getUserInfo(state.token).then(res => {\n      //       const data = res.data\n      //       commit('setAvatar', data.avatar)\n      //       commit('setUserName', data.name)\n      //       commit('setUserId', data.user_id)\n      //       commit('setAccess', data.access)\n      //       commit('setHasGetInfo', true)\n      //       resolve(data)\n      //     }).catch(err => {\n      //       reject(err)\n      //     })\n      //   } catch (error) {\n      //     reject(error)\n      //   }\n      // })\n    },\n    // 获取用户菜单\n    getNav ({ state, commit, router }) {\n      return new Promise((resolve, reject) => {\n        try {\n          getNav().then(res => {\n            getRouter = res.data.data.router\n            getRouter = filterAsyncRouter(getRouter)\n            commit('setRoutes', getRouter)\n            resolve(getRouter)\n          }).catch(err => {\n            reject(err)\n          })\n        } catch (error) {\n          reject(error)\n        }\n      })\n    },\n    // 此方法用来获取未读消息条数，接口只返回数值，不返回消息列表\n    getUnreadMessageCount ({ state, commit }) {\n      getUnreadCount().then(res => {\n        const { data } = res\n        commit('setMessageCount', data)\n      })\n    },\n    // 获取消息列表，其中包含未读、已读、回收站三个列表\n    getMessageList ({ state, commit }) {\n      return new Promise((resolve, reject) => {\n        getMessage().then(res => {\n          const { unread, readed, trash } = res.data\n          commit('setMessageUnreadList', unread.sort((a, b) => new Date(b.create_time) - new Date(a.create_time)))\n          commit('setMessageReadedList', readed.map(_ => {\n            _.loading = false\n            return _\n          }).sort((a, b) => new Date(b.create_time) - new Date(a.create_time)))\n          commit('setMessageTrashList', trash.map(_ => {\n            _.loading = false\n            return _\n          }).sort((a, b) => new Date(b.create_time) - new Date(a.create_time)))\n          resolve()\n        }).catch(error => {\n          reject(error)\n        })\n      })\n    },\n    // 根据当前点击的消息的id获取内容\n    getContentByMsgId ({ state, commit }, { msg_id }) {\n      return new Promise((resolve, reject) => {\n        let contentItem = state.messageContentStore[msg_id]\n        if (contentItem) {\n          resolve(contentItem)\n        } else {\n          getContentByMsgId(msg_id).then(res => {\n            const content = res.data\n            commit('updateMessageContentStore', { msg_id, content })\n            resolve(content)\n          })\n        }\n      })\n    },\n    // 把一个未读消息标记为已读\n    hasRead ({ state, commit }, { msg_id }) {\n      return new Promise((resolve, reject) => {\n        hasRead(msg_id).then(() => {\n          commit('moveMsg', {\n            from: 'messageUnreadList',\n            to: 'messageReadedList',\n            msg_id\n          })\n          commit('setMessageCount', state.unreadCount - 1)\n          resolve()\n        }).catch(error => {\n          reject(error)\n        })\n      })\n    },\n    // 删除一个已读消息到回收站\n    removeReaded ({ commit }, { msg_id }) {\n      return new Promise((resolve, reject) => {\n        removeReaded(msg_id).then(() => {\n          commit('moveMsg', {\n            from: 'messageReadedList',\n            to: 'messageTrashList',\n            msg_id\n          })\n          resolve()\n        }).catch(error => {\n          reject(error)\n        })\n      })\n    },\n    // 还原一个已删除消息到已读消息\n    restoreTrash ({ commit }, { msg_id }) {\n      return new Promise((resolve, reject) => {\n        restoreTrash(msg_id).then(() => {\n          commit('moveMsg', {\n            from: 'messageTrashList',\n            to: 'messageReadedList',\n            msg_id\n          })\n          resolve()\n        }).catch(error => {\n          reject(error)\n        })\n      })\n    }\n  }\n}\n"]}]}