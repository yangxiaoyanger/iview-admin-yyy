{"remainingRequest":"D:\\iview-admin-master\\node_modules\\thread-loader\\dist\\cjs.js!D:\\iview-admin-master\\node_modules\\babel-loader\\lib\\index.js!D:\\iview-admin-master\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\iview-admin-master\\src\\store\\module\\app.js","dependencies":[{"path":"D:\\iview-admin-master\\src\\store\\module\\app.js","mtime":1562900539687},{"path":"D:\\iview-admin-master\\.babelrc","mtime":1560231513000},{"path":"D:\\iview-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"D:\\\\iview-admin-master\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.function.name\";\nimport _toConsumableArray from \"D:\\\\iview-admin-master\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport { getBreadCrumbList, setTagNavListInLocalstorage, getMenuByRouter, getSidemenuList, getTagNavListFromLocalstorage, getHomeRoute, getNextRoute, routeHasExist, routeEqual, getRouteTitleHandled, localSave, localRead } from '@/libs/util';\nimport { saveErrorLogger } from '@/api/data';\nimport router from '@/router';\nimport config from '@/config';\nvar homeName = config.homeName;\n\nvar closePage = function closePage(state, route) {\n  var nextRoute = getNextRoute(state.tagNavList, route);\n  state.tagNavList = state.tagNavList.filter(function (item) {\n    return !routeEqual(item, route);\n  });\n  router.push(nextRoute);\n};\n\nexport default {\n  state: {\n    navMenu: '',\n    breadCrumbList: [],\n    sidemenuList: [],\n    tagNavList: [],\n    homeRoute: {},\n    local: localRead('local'),\n    errorList: [],\n    hasReadErrorPage: false\n  },\n  getters: {\n    menuList: function menuList(state, getters, rootState) {\n      // 所有的menulist\n      return getMenuByRouter(rootState.user.routes, rootState.user.access);\n    },\n    errorCount: function errorCount(state) {\n      return state.errorList.length;\n    },\n    sidemenuList: function sidemenuList(state, getters, rootState) {\n      // 侧边栏\n      return state.sidemenuList;\n    }\n  },\n  mutations: {\n    setBreadCrumb: function setBreadCrumb(state, route) {\n      state.breadCrumbList = getBreadCrumbList(route, state.homeRoute);\n    },\n    setSidemenuList: function setSidemenuList(state, sidemenuList) {\n      state.sidemenuList = sidemenuList;\n    },\n    setNavMenu: function setNavMenu(state, request) {\n      state.navMenu = request;\n    },\n    setHomeRoute: function setHomeRoute(state, routes) {\n      state.homeRoute = getHomeRoute(routes, homeName);\n    },\n    setTagNavList: function setTagNavList(state, list) {\n      var tagList = [];\n\n      if (list) {\n        tagList = _toConsumableArray(list);\n      } else tagList = getTagNavListFromLocalstorage() || [];\n\n      if (tagList[0] && tagList[0].name !== homeName) tagList.shift();\n      var homeTagIndex = tagList.findIndex(function (item) {\n        return item.name === homeName;\n      });\n\n      if (homeTagIndex > 0) {\n        var homeTag = tagList.splice(homeTagIndex, 1)[0];\n        tagList.unshift(homeTag);\n      }\n\n      state.tagNavList = tagList;\n      setTagNavListInLocalstorage(_toConsumableArray(tagList));\n    },\n    closeTag: function closeTag(state, route) {\n      var tag = state.tagNavList.filter(function (item) {\n        return routeEqual(item, route);\n      });\n      route = tag[0] ? tag[0] : null;\n      if (!route) return;\n      closePage(state, route);\n    },\n    addTag: function addTag(state, _ref) {\n      var route = _ref.route,\n          _ref$type = _ref.type,\n          type = _ref$type === void 0 ? 'unshift' : _ref$type;\n      var router = getRouteTitleHandled(route);\n\n      if (!routeHasExist(state.tagNavList, router)) {\n        if (type === 'push') state.tagNavList.push(router);else {\n          if (router.name === homeName) state.tagNavList.unshift(router);else state.tagNavList.splice(1, 0, router);\n        }\n        setTagNavListInLocalstorage(_toConsumableArray(state.tagNavList));\n      }\n    },\n    setLocal: function setLocal(state, lang) {\n      localSave('local', lang);\n      state.local = lang;\n    },\n    addError: function addError(state, error) {\n      state.errorList.push(error);\n    },\n    setHasReadErrorLoggerStatus: function setHasReadErrorLoggerStatus(state) {\n      var status = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      state.hasReadErrorPage = status;\n    }\n  },\n  actions: {\n    addErrorLog: function addErrorLog(_ref2, info) {\n      var commit = _ref2.commit,\n          rootState = _ref2.rootState;\n      if (!window.location.href.includes('error_logger_page')) commit('setHasReadErrorLoggerStatus', false);\n      var _rootState$user = rootState.user,\n          token = _rootState$user.token,\n          userId = _rootState$user.userId,\n          userName = _rootState$user.userName;\n\n      var data = _objectSpread({}, info, {\n        time: Date.parse(new Date()),\n        token: token,\n        userId: userId,\n        userName: userName\n      });\n\n      saveErrorLogger(info).then(function () {\n        commit('addError', data);\n      });\n    },\n    setNavMenu: function setNavMenu(_ref3, request) {\n      var commit = _ref3.commit,\n          state = _ref3.state,\n          rootState = _ref3.rootState;\n      commit('setNavMenu', request);\n    },\n    setSidemenuList: function setSidemenuList(_ref4, request) {\n      var commit = _ref4.commit,\n          state = _ref4.state,\n          rootState = _ref4.rootState;\n      var sidemenuList = getSidemenuList(state, rootState.user.routes);\n      commit('setSidemenuList', sidemenuList);\n    }\n  }\n};",null]}