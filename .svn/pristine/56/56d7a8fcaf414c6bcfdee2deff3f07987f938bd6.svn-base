{"remainingRequest":"D:\\iview-admin-master\\node_modules\\thread-loader\\dist\\cjs.js!D:\\iview-admin-master\\node_modules\\babel-loader\\lib\\index.js!D:\\iview-admin-master\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\iview-admin-master\\src\\libs\\util.js","dependencies":[{"path":"D:\\iview-admin-master\\src\\libs\\util.js","mtime":1562134974585},{"path":"D:\\iview-admin-master\\.babelrc","mtime":1560231513000},{"path":"D:\\iview-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _toConsumableArray from \"D:\\\\iview-admin-master\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"D:\\\\iview-admin-master\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.function.name\";\nimport Cookies from 'js-cookie'; // cookie保存的天数\n\nimport config from '@/config';\nimport { forEach, hasOneOf, objEqual } from '@/libs/tools'; // 获取组件的方法\n\nimport Main from '@/components/main';\nimport SubMain from '@/components/main/submain.vue';\nvar title = config.title,\n    cookieExpires = config.cookieExpires,\n    useI18n = config.useI18n;\n\nvar _import = require('../router/_import_' + process.env.NODE_ENV); // Layout 是架构组件，不在后台返回，在文件里单独引入\n\n\nexport var TOKEN_KEY = 'token';\nexport var setToken = function setToken(token) {\n  Cookies.set(TOKEN_KEY, token, {\n    expires: cookieExpires || 1\n  });\n};\nexport var getToken = function getToken() {\n  var token = Cookies.get(TOKEN_KEY);\n  if (token) return token;else return false;\n};\nexport var hasChild = function hasChild(item) {\n  return item.children && item.children.length !== 0;\n};\n\nvar showThisMenuEle = function showThisMenuEle(item, access) {\n  if (item.meta && item.meta.access && item.meta.access.length) {\n    if (hasOneOf(item.meta.access, access)) return true;else return false;\n  } else return true;\n}; // /**\n//  * @param {Array} list 通过路由列表得到菜单列表\n//  * @returns {Array}\n//  */\n// export const getMenuByRouter = (list, access) => {\n//   let res = []\n//   forEach(list, item => {\n//     if (!item.meta || (item.meta && !item.meta.hideInMenu)) {\n//       let obj = {\n//         icon: (item.meta && item.meta.icon) || '',\n//         name: item.name,\n//         meta: item.meta\n//       }\n//       if ((hasChild(item) || (item.meta && item.meta.showAlways)) && showThisMenuEle(item, access)) {\n//         obj.children = getMenuByRouter(item.children, access)\n//       }\n//       if (item.meta && item.meta.href) obj.href = item.meta.href\n//       if (showThisMenuEle(item, access)) res.push(obj)\n//     }\n//   })\n//   return res\n// }\n\n/**\n * @param {Array} list 通过路由列表得到菜单列表\n * @returns {Array}\n */\n\n\nexport var getMenuByRouter = function getMenuByRouter(list, access) {\n  var res = [];\n  forEach(list, function (item) {\n    // if (!item.meta || (item.meta && !item.meta.hideInMenu)) {\n    var obj = {\n      icon: item.meta && item.meta.icon || '',\n      name: item.name,\n      meta: item.meta\n    };\n\n    if ((hasChild(item) || item.meta && item.meta.showAlways) && showThisMenuEle(item, access)) {\n      obj.children = getMenuByRouter(item.children, access);\n    }\n\n    if (item.meta && item.meta.href) obj.href = item.meta.href;\n    if (showThisMenuEle(item, access)) res.push(obj); // }\n  });\n  return res;\n};\n/**\n * @param {Array} list 通过路由列表得到菜单列表\n * @returns {Array}\n */\n\nexport var getNavlistByRouter = function getNavlistByRouter(list, access) {\n  var res = [];\n  forEach(list, function (item) {\n    if (!item.meta || item.meta && !item.meta.hideInMenu) {\n      var obj = {\n        icon: item.meta && item.meta.icon || '',\n        name: item.name,\n        meta: item.meta // if ((hasChild(item) || (item.meta && item.meta.showAlways)) && showThisMenuEle(item, access)) {\n        //   obj.children = getMenuByRouter(item.children, access)\n        // }\n\n      };\n      if (item.meta && item.meta.href) obj.href = item.meta.href;\n      if (showThisMenuEle(item, access)) res.push(obj);\n    }\n  });\n  return res;\n};\n/**\n * @param {Object} // 遍历后台传来的路由字符串，转换为组件对象\n * @returns {Object}\n */\n\nexport var filterAsyncRouter = function filterAsyncRouter(asyncRouterMap) {\n  var accessedRouters = asyncRouterMap.filter(function (route) {\n    if (route.component) {\n      if (route.component === 'Main') {\n        // Main组件特殊处理\n        route.component = Main;\n      } else if (route.component === 'SubMain') {\n        route.component = SubMain;\n      } else {\n        route.component = _import(route.component);\n      }\n    }\n\n    if (route.children && route.children.length) {\n      route.children = filterAsyncRouter(route.children);\n    }\n\n    return true;\n  });\n  return accessedRouters;\n};\n/**\n * @param {Object} menu 树形结构的menu获取第一个child路由\n * @returns {Object}\n */\n\nexport var getFirstChildForMenu = function getFirstChildForMenu(menu) {\n  if (hasChild(menu)) {\n    return getFirstChildForMenu(menu.children[0]);\n  } else {\n    return menu;\n  }\n};\n/**\n * @param {Object} menu 树形结构的menu获取第一个child路由\n * @returns {Object}\n */\n\nexport var getFirstChildForMenuByRequest = function getFirstChildForMenuByRequest(list, name) {\n  var navItem = {};\n  forEach(list, function (item) {\n    if (item.name === name) {\n      navItem = getFirstChildForMenu(item);\n    }\n  });\n  return navItem;\n};\n/**\n * @param {Array} list 通过路由列表和navmenu得到侧边栏菜单列表\n * @returns {Array}\n */\n\nexport var getMenuByRouterForSidemenu = function getMenuByRouterForSidemenu(state, navMenu) {\n  var res = [];\n  forEach(navMenu, function (item) {\n    var obj = {\n      icon: item.meta && item.meta.icon || '',\n      name: item.name,\n      meta: item.meta // let obj = {\n      //   icon: item.iconcls ? item.iconcls : 'fa fa-credit-card',\n      //   request: item.request,\n      //   title: item.menuname,\n      //   name: item.request\n      // }\n\n    };\n\n    if (hasChild(item)) {\n      obj.children = getMenuByRouterForSidemenu(state, item.children);\n    }\n\n    res.push(obj);\n  });\n  return res;\n};\n/**\n * @param {Array} list 通过路由列表得到导航菜单列表\n * @returns {Array}\n */\n\nexport var getSidemenuList = function getSidemenuList(state, menulist) {\n  var res = [];\n  forEach(menulist, function (item) {\n    if (item.name === state.navMenu) {\n      res = getMenuByRouterForSidemenu(state, item.children);\n    }\n  });\n  return res;\n};\n/**\n * @param {Array} routeMetched 当前路由metched\n * @returns {Array}\n */\n\nexport var getBreadCrumbList = function getBreadCrumbList(route, homeRoute) {\n  var homeItem = _objectSpread({}, homeRoute, {\n    icon: homeRoute.meta.icon\n  });\n\n  var routeMetched = route.matched;\n  if (routeMetched.some(function (item) {\n    return item.name === homeRoute.name;\n  })) return [homeItem];\n  var res = routeMetched.filter(function (item) {\n    return item.meta === undefined || !item.meta.hideInBread;\n  }).map(function (item) {\n    var meta = _objectSpread({}, item.meta);\n\n    if (meta.title && typeof meta.title === 'function') {\n      meta.__titleIsFunction__ = true;\n      meta.title = meta.title(route);\n    }\n\n    var obj = {\n      icon: item.meta && item.meta.icon || '',\n      name: item.name,\n      meta: meta\n    };\n    return obj;\n  });\n  res = res.filter(function (item) {\n    return !item.meta.hideInMenu;\n  });\n  return [_objectSpread({}, homeItem, {\n    to: homeRoute.path\n  })].concat(_toConsumableArray(res));\n};\nexport var getRouteTitleHandled = function getRouteTitleHandled(route) {\n  var router = _objectSpread({}, route);\n\n  var meta = _objectSpread({}, route.meta);\n\n  var title = '';\n\n  if (meta.title) {\n    if (typeof meta.title === 'function') {\n      meta.__titleIsFunction__ = true;\n      title = meta.title(router);\n    } else title = meta.title;\n  }\n\n  meta.title = title;\n  router.meta = meta;\n  return router;\n};\nexport var showTitle = function showTitle(item, vm) {\n  var _item$meta = item.meta,\n      title = _item$meta.title,\n      __titleIsFunction__ = _item$meta.__titleIsFunction__;\n  if (!title) return;\n\n  if (useI18n) {\n    if (title.includes('{{') && title.includes('}}') && useI18n) title = title.replace(/({{[\\s\\S]+?}})/, function (m, str) {\n      return str.replace(/{{([\\s\\S]*)}}/, function (m, _) {\n        return vm.$t(_.trim());\n      });\n    });else if (__titleIsFunction__) title = item.meta.title; // else title = vm.$t(item.name)  // ytt注释掉\n  } else title = item.meta && item.meta.title || item.name;\n\n  return title;\n};\n/**\n * @description 本地存储和获取标签导航列表\n */\n\nexport var setTagNavListInLocalstorage = function setTagNavListInLocalstorage(list) {\n  localStorage.tagNaveList = JSON.stringify(list);\n};\n/**\n * @returns {Array} 其中的每个元素只包含路由原信息中的name, path, meta三项\n */\n\nexport var getTagNavListFromLocalstorage = function getTagNavListFromLocalstorage() {\n  var list = localStorage.tagNaveList;\n  return list ? JSON.parse(list) : [];\n};\n/**\n * @description 本地存储和获取后端路由\n */\n\nexport var setRouterInLocalstorage = function setRouterInLocalstorage(list) {\n  localStorage.router = JSON.stringify(list);\n};\n/**\n * @returns {Array} 本地存储和获取后端路由\n */\n\nexport var getRouterFromLocalstorage = function getRouterFromLocalstorage() {\n  var list = localStorage.router;\n  return list ? JSON.parse(list) : [];\n};\n/**\n * @param {Array} routers 路由列表数组\n * @description 用于找到路由列表中name为home的对象\n */\n\nexport var getHomeRoute = function getHomeRoute(routers) {\n  var homeName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'home';\n  var i = -1;\n  var len = routers.length;\n  var homeRoute = {};\n\n  while (++i < len) {\n    var item = routers[i];\n\n    if (item.children && item.children.length) {\n      var res = getHomeRoute(item.children, homeName);\n      if (res.name) return res;\n    } else {\n      if (item.name === homeName) homeRoute = item;\n    }\n  }\n\n  return homeRoute;\n};\n/**\n * @param {*} list 现有标签导航列表\n * @param {*} newRoute 新添加的路由原信息对象\n * @description 如果该newRoute已经存在则不再添加\n */\n\nexport var getNewTagList = function getNewTagList(list, newRoute) {\n  var name = newRoute.name,\n      path = newRoute.path,\n      meta = newRoute.meta;\n\n  var newList = _toConsumableArray(list);\n\n  if (newList.findIndex(function (item) {\n    return item.name === name;\n  }) >= 0) return newList;else newList.push({\n    name: name,\n    path: path,\n    meta: meta\n  });\n  return newList;\n};\n/**\n * @param {*} access 用户权限数组，如 ['super_admin', 'admin']\n * @param {*} route 路由列表\n */\n\nvar hasAccess = function hasAccess(access, route) {\n  if (route.meta && route.meta.access) return hasOneOf(access, route.meta.access);else return true;\n};\n/**\n * 权鉴\n * @param {*} name 即将跳转的路由name\n * @param {*} access 用户权限数组\n * @param {*} routes 路由列表\n * @description 用户是否可跳转到该页\n */\n\n\nexport var canTurnTo = function canTurnTo(name, access, routes) {\n  var routePermissionJudge = function routePermissionJudge(list) {\n    return list.some(function (item) {\n      if (item.children && item.children.length) {\n        return routePermissionJudge(item.children);\n      } else if (item.name === name) {\n        return hasAccess(access, item);\n      }\n    });\n  };\n\n  return routePermissionJudge(routes);\n};\n/**\n * @param {String} url\n * @description 从URL中解析参数\n */\n\nexport var getParams = function getParams(url) {\n  var keyValueArr = url.split('?')[1].split('&');\n  var paramObj = {};\n  keyValueArr.forEach(function (item) {\n    var keyValue = item.split('=');\n    paramObj[keyValue[0]] = keyValue[1];\n  });\n  return paramObj;\n};\n/**\n * @param {Array} list 标签列表\n * @param {String} name 当前关闭的标签的name\n */\n\nexport var getNextRoute = function getNextRoute(list, route) {\n  var res = {};\n\n  if (list.length === 2) {\n    res = getHomeRoute(list);\n  } else {\n    var index = list.findIndex(function (item) {\n      return routeEqual(item, route);\n    });\n    if (index === list.length - 1) res = list[list.length - 2];else res = list[index + 1];\n  }\n\n  return res;\n};\n/**\n * @param {Number} times 回调函数需要执行的次数\n * @param {Function} callback 回调函数\n */\n\nexport var doCustomTimes = function doCustomTimes(times, callback) {\n  var i = -1;\n\n  while (++i < times) {\n    callback(i);\n  }\n};\n/**\n * @param {Object} file 从上传组件得到的文件对象\n * @returns {Promise} resolve参数是解析后的二维数组\n * @description 从Csv文件中解析出表格，解析成二维数组\n */\n\nexport var getArrayFromFile = function getArrayFromFile(file) {\n  var nameSplit = file.name.split('.');\n  var format = nameSplit[nameSplit.length - 1];\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n    reader.readAsText(file); // 以文本格式读取\n\n    var arr = [];\n\n    reader.onload = function (evt) {\n      var data = evt.target.result; // 读到的数据\n\n      var pasteData = data.trim();\n      arr = pasteData.split(/[\\n\\u0085\\u2028\\u2029]|\\r\\n?/g).map(function (row) {\n        return row.split('\\t');\n      }).map(function (item) {\n        return item[0].split(',');\n      });\n      if (format === 'csv') resolve(arr);else reject(new Error('[Format Error]:你上传的不是Csv文件'));\n    };\n  });\n};\n/**\n * @param {Array} array 表格数据二维数组\n * @returns {Object} { columns, tableData }\n * @description 从二维数组中获取表头和表格数据，将第一行作为表头，用于在iView的表格中展示数据\n */\n\nexport var getTableDataFromArray = function getTableDataFromArray(array) {\n  var columns = [];\n  var tableData = [];\n\n  if (array.length > 1) {\n    var titles = array.shift();\n    columns = titles.map(function (item) {\n      return {\n        title: item,\n        key: item\n      };\n    });\n    tableData = array.map(function (item) {\n      var res = {};\n      item.forEach(function (col, i) {\n        res[titles[i]] = col;\n      });\n      return res;\n    });\n  }\n\n  return {\n    columns: columns,\n    tableData: tableData\n  };\n};\nexport var findNodeUpper = function findNodeUpper(ele, tag) {\n  if (ele.parentNode) {\n    if (ele.parentNode.tagName === tag.toUpperCase()) {\n      return ele.parentNode;\n    } else {\n      return findNodeUpper(ele.parentNode, tag);\n    }\n  }\n};\nexport var findNodeUpperByClasses = function findNodeUpperByClasses(ele, classes) {\n  var parentNode = ele.parentNode;\n\n  if (parentNode) {\n    var classList = parentNode.classList;\n\n    if (classList && classes.every(function (className) {\n      return classList.contains(className);\n    })) {\n      return parentNode;\n    } else {\n      return findNodeUpperByClasses(parentNode, classes);\n    }\n  }\n};\nexport var findNodeDownward = function findNodeDownward(ele, tag) {\n  var tagName = tag.toUpperCase();\n\n  if (ele.childNodes.length) {\n    var i = -1;\n    var len = ele.childNodes.length;\n\n    while (++i < len) {\n      var child = ele.childNodes[i];\n      if (child.tagName === tagName) return child;else return findNodeDownward(child, tag);\n    }\n  }\n};\nexport var showByAccess = function showByAccess(access, canViewAccess) {\n  return hasOneOf(canViewAccess, access);\n};\n/**\n * @description 根据name/params/query判断两个路由对象是否相等\n * @param {*} route1 路由对象\n * @param {*} route2 路由对象\n */\n\nexport var routeEqual = function routeEqual(route1, route2) {\n  var params1 = route1.params || {};\n  var params2 = route2.params || {};\n  var query1 = route1.query || {};\n  var query2 = route2.query || {};\n  return route1.name === route2.name && objEqual(params1, params2) && objEqual(query1, query2);\n};\n/**\n * 判断打开的标签列表里是否已存在这个新添加的路由对象\n */\n\nexport var routeHasExist = function routeHasExist(tagNavList, routeItem) {\n  var len = tagNavList.length;\n  var res = false;\n  doCustomTimes(len, function (index) {\n    if (routeEqual(tagNavList[index], routeItem)) res = true;\n  });\n  return res;\n};\nexport var localSave = function localSave(key, value) {\n  localStorage.setItem(key, value);\n};\nexport var localRead = function localRead(key) {\n  return localStorage.getItem(key) || '';\n}; // scrollTop animation\n\nexport var scrollTop = function scrollTop(el) {\n  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var to = arguments.length > 2 ? arguments[2] : undefined;\n  var duration = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 500;\n  var endCallback = arguments.length > 4 ? arguments[4] : undefined;\n\n  if (!window.requestAnimationFrame) {\n    window.requestAnimationFrame = window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n      return window.setTimeout(callback, 1000 / 60);\n    };\n  }\n\n  var difference = Math.abs(from - to);\n  var step = Math.ceil(difference / duration * 50);\n\n  var scroll = function scroll(start, end, step) {\n    if (start === end) {\n      endCallback && endCallback();\n      return;\n    }\n\n    var d = start + step > end ? end : start + step;\n\n    if (start > end) {\n      d = start - step < end ? end : start - step;\n    }\n\n    if (el === window) {\n      window.scrollTo(d, d);\n    } else {\n      el.scrollTop = d;\n    }\n\n    window.requestAnimationFrame(function () {\n      return scroll(d, end, step);\n    });\n  };\n\n  scroll(from, to, step);\n};\n/**\n * @description 根据当前跳转的路由设置显示在浏览器标签的title\n * @param {Object} routeItem 路由对象\n * @param {Object} vm Vue实例\n */\n\nexport var setTitle = function setTitle(routeItem, vm) {\n  var handledRoute = getRouteTitleHandled(routeItem);\n  var pageTitle = showTitle(handledRoute, vm);\n  var resTitle = pageTitle ? \"\".concat(title, \" - \").concat(pageTitle) : title;\n  window.document.title = resTitle;\n};",null]}