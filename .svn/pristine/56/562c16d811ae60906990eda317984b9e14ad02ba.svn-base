{"remainingRequest":"D:\\iview-admin-master\\node_modules\\thread-loader\\dist\\cjs.js!D:\\iview-admin-master\\node_modules\\babel-loader\\lib\\index.js!D:\\iview-admin-master\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\iview-admin-master\\src\\store\\module\\user.js","dependencies":[{"path":"D:\\iview-admin-master\\src\\store\\module\\user.js","mtime":1562822833077},{"path":"D:\\iview-admin-master\\.babelrc","mtime":1560231513000},{"path":"D:\\iview-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.array.find-index\";\nimport { login, getPublicKey as _getPublicKey, logout, getNav as _getNav, getUserInfo, getMessage, getContentByMsgId as _getContentByMsgId, hasRead as _hasRead, removeReaded as _removeReaded, restoreTrash as _restoreTrash, getUnreadCount } from '@/api/user';\nimport { setToken as _setToken, getToken, filterAsyncRouter } from '@/libs/util';\nimport { RSAUtils } from '@/libs/security';\nvar getRouter;\nexport default {\n  state: {\n    modulus: '',\n    exponent: '',\n    userName: '',\n    userId: '',\n    userInfo: {},\n    avatarImgPath: '',\n    token: getToken(),\n    access: '',\n    hasGetInfo: false,\n    unreadCount: 0,\n    messageUnreadList: [],\n    messageReadedList: [],\n    messageTrashList: [],\n    messageContentStore: {}\n  },\n  mutations: {\n    setExponent: function setExponent(state, exponent) {\n      state.exponent = exponent;\n    },\n    setModulus: function setModulus(state, modulus) {\n      state.modulus = modulus;\n    },\n    setUserInfo: function setUserInfo(state, userInfo) {\n      state.userInfo = userInfo;\n    },\n    setRoutes: function setRoutes(state, routes) {\n      state.routes = routes;\n    },\n    setAvatar: function setAvatar(state, avatarPath) {\n      state.avatarImgPath = avatarPath;\n    },\n    setUserId: function setUserId(state, id) {\n      state.userId = id;\n    },\n    setUserName: function setUserName(state, name) {\n      state.userName = name;\n    },\n    setAccess: function setAccess(state, access) {\n      state.access = access;\n    },\n    setToken: function setToken(state, token) {\n      state.token = token;\n\n      _setToken(token);\n    },\n    setHasGetInfo: function setHasGetInfo(state, status) {\n      state.hasGetInfo = status;\n    },\n    setMessageCount: function setMessageCount(state, count) {\n      state.unreadCount = count;\n    },\n    setMessageUnreadList: function setMessageUnreadList(state, list) {\n      state.messageUnreadList = list;\n    },\n    setMessageReadedList: function setMessageReadedList(state, list) {\n      state.messageReadedList = list;\n    },\n    setMessageTrashList: function setMessageTrashList(state, list) {\n      state.messageTrashList = list;\n    },\n    updateMessageContentStore: function updateMessageContentStore(state, _ref) {\n      var msg_id = _ref.msg_id,\n          content = _ref.content;\n      state.messageContentStore[msg_id] = content;\n    },\n    moveMsg: function moveMsg(state, _ref2) {\n      var from = _ref2.from,\n          to = _ref2.to,\n          msg_id = _ref2.msg_id;\n      var index = state[from].findIndex(function (_) {\n        return _.msg_id === msg_id;\n      });\n      var msgItem = state[from].splice(index, 1)[0];\n      msgItem.loading = false;\n      state[to].unshift(msgItem);\n    }\n  },\n  getters: {\n    messageUnreadCount: function messageUnreadCount(state) {\n      return state.messageUnreadList.length;\n    },\n    messageReadedCount: function messageReadedCount(state) {\n      return state.messageReadedList.length;\n    },\n    messageTrashCount: function messageTrashCount(state) {\n      return state.messageTrashList.length;\n    },\n    routes: function routes(state) {\n      return state.routes;\n    }\n  },\n  actions: {\n    // 获取getPublicKey\n    getPublicKey: function getPublicKey(_ref3) {\n      var commit = _ref3.commit;\n      return new Promise(function (resolve, reject) {\n        _getPublicKey().then(function (res) {\n          commit('setModulus', res.data.data.modulus);\n          commit('setExponent', res.data.data.exponent); // this.setToken(res.data.data.token)\n\n          resolve(res);\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n    },\n    // 登录\n    handleLogin: function handleLogin(_ref4, _ref5) {\n      var state = _ref4.state,\n          commit = _ref4.commit;\n      var userName = _ref5.userName,\n          password = _ref5.password;\n      userName = userName.trim();\n      var k = RSAUtils.getKeyPair(state.exponent, '', state.modulus);\n      var k2 = 'name=' + userName + '&pwd=' + password;\n      var key = RSAUtils.encryptedString(k, k2);\n      return new Promise(function (resolve, reject) {\n        login(key).then(function (res) {\n          var data = res.data;\n          commit('setUserInfo', res.data.data);\n          commit('setToken', data.token);\n          commit('setHasGetInfo', true);\n          resolve(data);\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n    },\n    // 退出登录\n    handleLogOut: function handleLogOut(_ref6) {\n      var state = _ref6.state,\n          commit = _ref6.commit;\n      return new Promise(function (resolve, reject) {\n        logout(state.token).then(function () {\n          commit('setToken', '');\n          commit('setAccess', []);\n          resolve();\n        }).catch(function (err) {\n          reject(err);\n        }); // 如果你的退出登录无需请求接口，则可以直接使用下面三行代码而无需使用logout调用接口\n        // commit('setToken', '')\n        // commit('setAccess', [])\n        // resolve()\n      });\n    },\n    // 获取用户相关信息\n    getUserInfo: function getUserInfo(_ref7) {\n      var state = _ref7.state,\n          commit = _ref7.commit;\n      commit('setHasGetInfo', true);\n      return state.userInfo; // return new Promise((resolve, reject) => {\n      //   try {\n      //     getUserInfo(state.token).then(res => {\n      //       const data = res.data\n      //       commit('setAvatar', data.avatar)\n      //       commit('setUserName', data.name)\n      //       commit('setUserId', data.user_id)\n      //       commit('setAccess', data.access)\n      //       commit('setHasGetInfo', true)\n      //       resolve(data)\n      //     }).catch(err => {\n      //       reject(err)\n      //     })\n      //   } catch (error) {\n      //     reject(error)\n      //   }\n      // })\n    },\n    // 获取用户菜单\n    getNav: function getNav(_ref8) {\n      var state = _ref8.state,\n          commit = _ref8.commit,\n          router = _ref8.router;\n      return new Promise(function (resolve, reject) {\n        try {\n          _getNav().then(function (res) {\n            getRouter = res.data.data.router;\n            getRouter = filterAsyncRouter(getRouter);\n            commit('setRoutes', getRouter);\n            resolve(getRouter);\n          }).catch(function (err) {\n            reject(err);\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    },\n    // 此方法用来获取未读消息条数，接口只返回数值，不返回消息列表\n    getUnreadMessageCount: function getUnreadMessageCount(_ref9) {\n      var state = _ref9.state,\n          commit = _ref9.commit;\n      getUnreadCount().then(function (res) {\n        var data = res.data;\n        commit('setMessageCount', data);\n      });\n    },\n    // 获取消息列表，其中包含未读、已读、回收站三个列表\n    getMessageList: function getMessageList(_ref10) {\n      var state = _ref10.state,\n          commit = _ref10.commit;\n      return new Promise(function (resolve, reject) {\n        getMessage().then(function (res) {\n          var _res$data = res.data,\n              unread = _res$data.unread,\n              readed = _res$data.readed,\n              trash = _res$data.trash;\n          commit('setMessageUnreadList', unread.sort(function (a, b) {\n            return new Date(b.create_time) - new Date(a.create_time);\n          }));\n          commit('setMessageReadedList', readed.map(function (_) {\n            _.loading = false;\n            return _;\n          }).sort(function (a, b) {\n            return new Date(b.create_time) - new Date(a.create_time);\n          }));\n          commit('setMessageTrashList', trash.map(function (_) {\n            _.loading = false;\n            return _;\n          }).sort(function (a, b) {\n            return new Date(b.create_time) - new Date(a.create_time);\n          }));\n          resolve();\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    // 根据当前点击的消息的id获取内容\n    getContentByMsgId: function getContentByMsgId(_ref11, _ref12) {\n      var state = _ref11.state,\n          commit = _ref11.commit;\n      var msg_id = _ref12.msg_id;\n      return new Promise(function (resolve, reject) {\n        var contentItem = state.messageContentStore[msg_id];\n\n        if (contentItem) {\n          resolve(contentItem);\n        } else {\n          _getContentByMsgId(msg_id).then(function (res) {\n            var content = res.data;\n            commit('updateMessageContentStore', {\n              msg_id: msg_id,\n              content: content\n            });\n            resolve(content);\n          });\n        }\n      });\n    },\n    // 把一个未读消息标记为已读\n    hasRead: function hasRead(_ref13, _ref14) {\n      var state = _ref13.state,\n          commit = _ref13.commit;\n      var msg_id = _ref14.msg_id;\n      return new Promise(function (resolve, reject) {\n        _hasRead(msg_id).then(function () {\n          commit('moveMsg', {\n            from: 'messageUnreadList',\n            to: 'messageReadedList',\n            msg_id: msg_id\n          });\n          commit('setMessageCount', state.unreadCount - 1);\n          resolve();\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    // 删除一个已读消息到回收站\n    removeReaded: function removeReaded(_ref15, _ref16) {\n      var commit = _ref15.commit;\n      var msg_id = _ref16.msg_id;\n      return new Promise(function (resolve, reject) {\n        _removeReaded(msg_id).then(function () {\n          commit('moveMsg', {\n            from: 'messageReadedList',\n            to: 'messageTrashList',\n            msg_id: msg_id\n          });\n          resolve();\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    // 还原一个已删除消息到已读消息\n    restoreTrash: function restoreTrash(_ref17, _ref18) {\n      var commit = _ref17.commit;\n      var msg_id = _ref18.msg_id;\n      return new Promise(function (resolve, reject) {\n        _restoreTrash(msg_id).then(function () {\n          commit('moveMsg', {\n            from: 'messageTrashList',\n            to: 'messageReadedList',\n            msg_id: msg_id\n          });\n          resolve();\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    }\n  }\n};",null]}