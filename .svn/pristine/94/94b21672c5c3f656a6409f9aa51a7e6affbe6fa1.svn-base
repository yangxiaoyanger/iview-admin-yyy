{"remainingRequest":"D:\\iview-admin-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\iview-admin-master\\src\\components\\tree-select\\tree-select-tree.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\iview-admin-master\\src\\components\\tree-select\\tree-select-tree.vue","mtime":1560231513000},{"path":"D:\\iview-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\iview-admin-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Emitter from 'iview/src/mixins/emitter.js'\n\nconst arrayEqual = (arr1, arr2) => {\n  // 判断数组的长度\n  if (arr1.length !== arr2.length) {\n    return false\n  } else {\n    // 循环遍历数组的值进行比较\n    for (let i = 0; i < arr1.length; i++) {\n      if (arr1[i] !== arr2[i]) {\n        return false\n      }\n    }\n    return true\n  }\n}\n\nexport default {\n  name: 'TreeSelectTree',\n  mixins: [Emitter],\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    selectedArray: {\n      type: Array,\n      default: () => []\n    },\n    loadData: Function\n  },\n  data () {\n    return {\n      flatDic: {},\n      checkedArray: []\n    }\n  },\n  inject: ['parent'],\n  computed: {\n    expandAll () {\n      return this.parent.$attrs['expand-all']\n    }\n  },\n  watch: {\n    data (newData, oldVal) {\n      this.updateFlagDic(newData)\n      let selectArray = []\n      this.selectedArray.forEach(id => {\n        if (id in this.flatDic) selectArray.push(id)\n      })\n      this.$emit('on-check', selectArray.map(id => this.flatDic[id]))\n      if (this.expandAll) this.checkData(newData, false, true)\n    },\n    selectedArray (newVal, oldVal) {\n      if (arrayEqual(newVal, oldVal)) return\n      const filtedNewVal = newVal.filter(id => id in this.flatDic)\n      this.$emit('on-check', filtedNewVal.map(id => this.flatDic[id]))\n      this.$emit('on-clear')\n      this.$nextTick(() => {\n        this.checkData(this.data, true)\n      })\n    }\n  },\n  methods: {\n    checkEmit (value, label) {\n      this.dispatch('iSelect', 'on-select-selected', {\n        value,\n        label\n      })\n      this.$emit('on-select-selected', {\n        value,\n        label\n      })\n    },\n    updateFlagDic (newData) {\n      let newFlagDic = {}\n      this.setFlagDic(newData, item => {\n        newFlagDic[item.id] = item\n      })\n      this.flatDic = newFlagDic\n    },\n    setFlagDic (data, callback) {\n      data.forEach(item => {\n        if (item.children && item.children.length) { this.setFlagDic(item.children, callback) }\n        callback(item)\n      })\n    },\n    handleCheckSelect (selectArray, selectItem) {\n      this.$emit('on-check', selectArray)\n      this.parent.$emit('on-change', selectArray)\n    },\n    checkData (data, emit, expandAll) {\n      data.forEach(item => {\n        if (this.selectedArray.includes(item.id)) {\n          this.$set(item, 'checked', true)\n          this.checkedArray.push(item)\n          if (emit) this.checkEmit(item.id, item.title)\n        } else this.$set(item, 'checked', false)\n        if (item.children && item.children.length) {\n          if (this.expandAll && expandAll) this.$set(item, 'expand', true)\n          this.checkData(item.children, emit, expandAll)\n        }\n      })\n    },\n    loadDataCallback (item, callback) {\n      this.loadData(item, data => {\n        return (() => {\n          callback(data)\n          this.updateFlagDic(this.data)\n        })(data)\n      })\n    }\n  },\n  mounted () {\n    this.checkData(this.data, false, true)\n    this.$nextTick(() => {\n      this.$emit('on-check', this.checkedArray)\n    })\n  }\n}\n",{"version":3,"sources":["tree-select-tree.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"tree-select-tree.vue","sourceRoot":"src/components/tree-select","sourcesContent":["<template>\n  <Tree\n    :data=\"data\"\n    @on-check-change=\"handleCheckSelect\"\n    v-on=\"parent.$listeners\"\n    v-bind=\"parent.$attrs\"\n    :load-data=\"loadDataCallback\"\n    show-checkbox\n  ></Tree>\n</template>\n\n<script>\nimport Emitter from 'iview/src/mixins/emitter.js'\n\nconst arrayEqual = (arr1, arr2) => {\n  // 判断数组的长度\n  if (arr1.length !== arr2.length) {\n    return false\n  } else {\n    // 循环遍历数组的值进行比较\n    for (let i = 0; i < arr1.length; i++) {\n      if (arr1[i] !== arr2[i]) {\n        return false\n      }\n    }\n    return true\n  }\n}\n\nexport default {\n  name: 'TreeSelectTree',\n  mixins: [Emitter],\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    selectedArray: {\n      type: Array,\n      default: () => []\n    },\n    loadData: Function\n  },\n  data () {\n    return {\n      flatDic: {},\n      checkedArray: []\n    }\n  },\n  inject: ['parent'],\n  computed: {\n    expandAll () {\n      return this.parent.$attrs['expand-all']\n    }\n  },\n  watch: {\n    data (newData, oldVal) {\n      this.updateFlagDic(newData)\n      let selectArray = []\n      this.selectedArray.forEach(id => {\n        if (id in this.flatDic) selectArray.push(id)\n      })\n      this.$emit('on-check', selectArray.map(id => this.flatDic[id]))\n      if (this.expandAll) this.checkData(newData, false, true)\n    },\n    selectedArray (newVal, oldVal) {\n      if (arrayEqual(newVal, oldVal)) return\n      const filtedNewVal = newVal.filter(id => id in this.flatDic)\n      this.$emit('on-check', filtedNewVal.map(id => this.flatDic[id]))\n      this.$emit('on-clear')\n      this.$nextTick(() => {\n        this.checkData(this.data, true)\n      })\n    }\n  },\n  methods: {\n    checkEmit (value, label) {\n      this.dispatch('iSelect', 'on-select-selected', {\n        value,\n        label\n      })\n      this.$emit('on-select-selected', {\n        value,\n        label\n      })\n    },\n    updateFlagDic (newData) {\n      let newFlagDic = {}\n      this.setFlagDic(newData, item => {\n        newFlagDic[item.id] = item\n      })\n      this.flatDic = newFlagDic\n    },\n    setFlagDic (data, callback) {\n      data.forEach(item => {\n        if (item.children && item.children.length) { this.setFlagDic(item.children, callback) }\n        callback(item)\n      })\n    },\n    handleCheckSelect (selectArray, selectItem) {\n      this.$emit('on-check', selectArray)\n      this.parent.$emit('on-change', selectArray)\n    },\n    checkData (data, emit, expandAll) {\n      data.forEach(item => {\n        if (this.selectedArray.includes(item.id)) {\n          this.$set(item, 'checked', true)\n          this.checkedArray.push(item)\n          if (emit) this.checkEmit(item.id, item.title)\n        } else this.$set(item, 'checked', false)\n        if (item.children && item.children.length) {\n          if (this.expandAll && expandAll) this.$set(item, 'expand', true)\n          this.checkData(item.children, emit, expandAll)\n        }\n      })\n    },\n    loadDataCallback (item, callback) {\n      this.loadData(item, data => {\n        return (() => {\n          callback(data)\n          this.updateFlagDic(this.data)\n        })(data)\n      })\n    }\n  },\n  mounted () {\n    this.checkData(this.data, false, true)\n    this.$nextTick(() => {\n      this.$emit('on-check', this.checkedArray)\n    })\n  }\n}\n</script>\n\n<style></style>\n"]}]}